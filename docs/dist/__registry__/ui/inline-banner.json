{
  "name": "inline-banner",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "inline-banner.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  inlineBanner,\n  type InlineBannerVariantProps,\n} from \"@seed-design/recipe/inlineBanner\";\n\nconst InlineBannerContext = React.createContext<{\n  variantProps: InlineBannerVariantProps;\n} | null>(null);\n\nconst useInlineBannerContext = () => {\n  const context = React.useContext(InlineBannerContext);\n  if (!context)\n    throw new Error(\n      \"Parts of InlineBanner cannot be rendered outside the InlineBanner\",\n    );\n\n  return context;\n};\n\nexport const InlineBannerTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nInlineBannerTitle.displayName = \"InlineBannerTitle\";\n\nexport const InlineBannerDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nInlineBannerDescription.displayName = \"InlineBannerDescription\";\n\nexport const InlineBannerLink = React.forwardRef<\n  HTMLButtonElement,\n  React.HTMLAttributes<HTMLButtonElement> & {\n    /**\n     * @default false\n     */\n    asChild?: boolean;\n  }\n>(({ asChild = false, children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      className={clsx(classNames.linkLabel, className)}\n      {...otherProps}\n    >\n      {children}\n    </Comp>\n  );\n});\nInlineBannerLink.displayName = \"InlineBannerLink\";\n\nexport interface InlineBannerProps extends InlineBannerVariantProps {\n  icon?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\n\ntype ReactInlineBannerProps = React.HTMLAttributes<HTMLDivElement> &\n  InlineBannerProps;\n\nexport const InlineBanner = React.forwardRef<\n  HTMLDivElement,\n  ReactInlineBannerProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"neutralWeak\",\n      icon,\n      suffix,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = inlineBanner({ variant });\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <InlineBannerContext.Provider value={{ variantProps: { variant } }}>\n          <div className={classNames.content}>\n            {icon && <Slot className={classNames.icon}>{icon}</Slot>}\n            <div>{children}</div>\n          </div>\n          {suffix}\n        </InlineBannerContext.Provider>\n      </div>\n    );\n  },\n);\nInlineBanner.displayName = \"InlineBanner\";\n"
    }
  ]
}
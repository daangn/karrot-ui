{
  "name": "dismissible-callout",
  "dependencies": [
    "@seed-design/react-dismissible",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "dismissible-callout.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/callout.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { callout, type CalloutVariantProps } from \"@seed-design/recipe/callout\";\nimport { IconXmarkFill } from \"@daangn/react-monochrome-icon\";\nimport {\n  useDismissible,\n  type DismissibleProps,\n} from \"@seed-design/react-dismissible\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst DismissibleCalloutContext = React.createContext<{\n  variantProps: CalloutVariantProps;\n} | null>(null);\n\nconst useDismissibleCalloutContext = () => {\n  const context = React.useContext(DismissibleCalloutContext);\n  if (!context)\n    throw new Error(\n      \"Parts of DismissibleCallout cannot be rendered outside the DismissibleCallout\",\n    );\n\n  return context;\n};\n\nexport const DismissibleCalloutTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useDismissibleCalloutContext();\n\n  const classNames = callout({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nDismissibleCalloutTitle.displayName = \"DismissibleCalloutTitle\";\n\nexport const DismissibleCalloutDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useDismissibleCalloutContext();\n  const classNames = callout({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nDismissibleCalloutDescription.displayName = \"DismissibleCalloutDescription\";\n\nexport const DismissibleCalloutLink = React.forwardRef<\n  HTMLButtonElement,\n  React.HTMLAttributes<HTMLButtonElement> & {\n    /**\n     * @default false\n     */\n    asChild?: boolean;\n  }\n>(({ asChild = false, children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useDismissibleCalloutContext();\n  const classNames = callout({ variant });\n\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n      <Comp\n        ref={ref}\n        className={clsx(classNames.linkLabel, className)}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </>\n  );\n});\nDismissibleCalloutLink.displayName = \"DismissibleCalloutLink\";\n\nexport interface DismissibleCalloutProps\n  extends DismissibleProps,\n    CalloutVariantProps {\n  dismissAriaLabel: string;\n}\n\ntype ReactDismissibleCalloutProps = React.HTMLAttributes<HTMLDivElement> &\n  DismissibleCalloutProps;\n\nexport const DismissibleCallout = React.forwardRef<\n  HTMLDivElement,\n  ReactDismissibleCalloutProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"neutral\",\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n      dismissAriaLabel,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = callout({ variant });\n\n    const { isOpen, onDismissButtonClick } = useDismissible({\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n    });\n\n    if (!isOpen) return null;\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          <div>\n            <DismissibleCalloutContext.Provider\n              value={{ variantProps: { variant } }}\n            >\n              {children}\n            </DismissibleCalloutContext.Provider>\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          aria-label={dismissAriaLabel}\n          className={classNames.dismissButton}\n          onClick={onDismissButtonClick}\n        >\n          <IconXmarkFill className={classNames.dismissIcon} />\n        </button>\n      </div>\n    );\n  },\n);\nDismissibleCallout.displayName = \"DismissibleCallout\";\n"
    }
  ]
}
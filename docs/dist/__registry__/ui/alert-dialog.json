{
  "name": "alert-dialog",
  "innerDependencies": [
    "action-button"
  ],
  "registries": [
    {
      "name": "alert-dialog.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/dialog.css\";\n\nimport { dialog } from \"@seed-design/recipe/dialog\";\nimport { useStyleEffect } from \"@stackflow/react-ui-core\";\nimport * as React from \"react\";\n\nimport { useActions, useActivity } from \"@stackflow/react\";\nimport { ActionButton } from \"./action-button\";\n\nexport type AlertDialogProps = {\n  title: string;\n  description: string;\n  onInteractOutside?: React.MouseEventHandler;\n};\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/alert-dialog\n */\nexport const AlertDialog: React.FC<AlertDialogProps> = ({\n  title,\n  description,\n  onInteractOutside,\n}) => {\n  const activity = useActivity();\n  const { pop } = useActions();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const backdropRef = React.useRef<HTMLDivElement>(null);\n\n  useStyleEffect({\n    styleName: \"hide\",\n    refs: [containerRef],\n  });\n  useStyleEffect({\n    styleName: \"offset\",\n    refs: [backdropRef],\n  });\n  useStyleEffect({\n    styleName: \"swipe-back\",\n    refs: [backdropRef],\n  });\n\n  const popLock = React.useRef(false);\n\n  const onClickOutside: React.MouseEventHandler = (e) => {\n    onInteractOutside?.(e);\n\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (popLock.current) {\n      return;\n    }\n    popLock.current = true;\n\n    pop();\n  };\n  const onClickContent: React.MouseEventHandler = (e) => {\n    e.stopPropagation();\n  };\n\n  const zIndexBase = (activity?.zIndex ?? 0) * 5 + 3;\n  // const transitionState = activity?.transitionState ?? \"enter-done\";\n\n  const classNames = dialog();\n\n  return (\n    <div\n      ref={containerRef}\n      role=\"alertdialog\"\n      data-stackflow-component-name=\"AlertDialog\"\n      data-stackflow-activity-id={activity?.id}\n      data-stackflow-activity-is-active={activity?.isActive}\n      className={classNames.container}\n      style={{ zIndex: zIndexBase }}\n      onClick={onClickOutside}\n    >\n      <div ref={backdropRef} className={classNames.backdrop} />\n      <div onClick={onClickContent} className={classNames.content}>\n        <div className={classNames.header}>\n          <h2 className={classNames.title}>{title}</h2>\n          <p className={classNames.description}>{description}</p>\n        </div>\n        <div className={classNames.footer}>\n          <ActionButton className={classNames.action}>lol</ActionButton>\n          <ActionButton className={classNames.action}>lol</ActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAlertDialog.displayName = \"AlertDialog\";\n"
    }
  ]
}
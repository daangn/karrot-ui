{
  "name": "control-chip",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "control-chip.tsx",
      "type": "ui",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport {\n  controlChip,\n  type ControlChipVariantProps,\n} from \"@seed-design/recipe/controlChip\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport \"@seed-design/stylesheet/controlChip.css\";\nimport {\n  type UseCheckboxProps,\n  useCheckbox,\n} from \"@seed-design/react-checkbox\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nexport interface ControlChipToggleProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\">,\n    UseCheckboxProps,\n    ControlChipVariantProps {\n  prefixIcon?: React.ReactNode;\n\n  suffixIcon?: React.ReactNode;\n}\n\nconst ControlChipToggle = React.forwardRef<\n  HTMLInputElement,\n  ControlChipToggleProps\n>(\n  (\n    {\n      className,\n      size = \"medium\",\n      layout = \"withText\",\n      children,\n      prefixIcon,\n      suffixIcon,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = controlChip({ size, layout });\n    const { rootProps, hiddenInputProps, stateProps, restProps } =\n      useCheckbox(otherProps);\n    return (\n      <label {...rootProps} className={clsx(classNames.root, className)}>\n        {prefixIcon && (\n          <Slot {...stateProps} className={classNames.prefixIcon}>\n            {prefixIcon}\n          </Slot>\n        )}\n        {layout === \"withText\" ? (\n          <span {...stateProps} className={classNames.label}>\n            {children}\n          </span>\n        ) : (\n          <Slot {...stateProps} className={classNames.icon}>\n            {children}\n          </Slot>\n        )}\n        {suffixIcon && (\n          <Slot {...stateProps} className={classNames.suffixIcon}>\n            {suffixIcon}\n          </Slot>\n        )}\n        <input\n          ref={ref}\n          {...hiddenInputProps}\n          {...restProps}\n          style={visuallyHidden}\n        />\n      </label>\n    );\n  },\n);\nControlChipToggle.displayName = \"ControlChip.Toggle\";\n\nexport const ControlChip = Object.assign(\n  () => {\n    console.warn(\n      \"ControlChip is a base component and should not be rendered. Use ControlChip.Toggle or ControlChip.Radio instead.\",\n    );\n  },\n  {\n    Toggle: ControlChipToggle,\n  },\n);\n"
    }
  ]
}
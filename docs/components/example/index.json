{
  "text-button-large": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonLarge() {\n  return (\n    <TextButton tone=\"neutral\" icon={<IconPlusCircleLine />} size=\"large\">\n      추가\n    </TextButton>\n  );\n}",
  "avatar-preview": "import { Avatar, AvatarBadge } from \"seed-design/ui/avatar\";\nimport { IdentityPlaceholder } from \"seed-design/ui/identity-placeholder\";\nimport { Flex } from \"seed-design/ui/layout\";\n\nexport default function AvatarPreview() {\n  return (\n    <Flex gap=\"s4\">\n      <Avatar\n        size=\"80\"\n        src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n        fallback={<IdentityPlaceholder />}\n      >\n        <AvatarBadge>\n          <div style={{ background: \"green\", width: 20, height: 20, borderRadius: 9999 }} />\n        </AvatarBadge>\n      </Avatar>\n      <Avatar size=\"80\" src={undefined} fallback={<IdentityPlaceholder />} />\n    </Flex>\n  );\n}",
  "action-button-icon-only": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonIconOnly() {\n  return (\n    <ActionButton layout=\"iconOnly\">\n      <IconPlusFill />\n    </ActionButton>\n  );\n}",
  "alert-dialog-stackflow": "import { useActivity } from \"@stackflow/react\";\nimport { useFlow, ActivityComponentType } from \"@stackflow/react/future\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogRoot,\n  AlertDialogTitle,\n} from \"seed-design/ui/alert-dialog\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"alert-dialog-stackflow\": unknown;\n  }\n}\n\nconst AlertDialogStackflow: ActivityComponentType<\"alert-dialog-stackflow\"> = () => {\n  const activity = useActivity();\n  const { pop } = useFlow();\n\n  return (\n    <AlertDialogRoot defaultOpen onOpenChange={(open) => !open && pop()}>\n      <AlertDialogContent layerIndex={activity.zIndex * 5}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>제목</AlertDialogTitle>\n          <AlertDialogDescription>Stackflow</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogAction asChild>\n            <ActionButton variant=\"neutralSolid\">확인</ActionButton>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  );\n};\n\nexport default AlertDialogStackflow;",
  "help-bubble-preview": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { HelpBubbleTrigger } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubblePreview() {\n  return (\n    <HelpBubbleTrigger\n      defaultOpen\n      flip={true}\n      title=\"타이틀\"\n      description=\"설명을 추가할 수 있어요.\"\n    >\n      <ActionButton>열기</ActionButton>\n    </HelpBubbleTrigger>\n  );\n}",
  "action-button-suffix-icon": "import { IconChevronRightFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonSuffixIcon() {\n  return <ActionButton suffixIcon={<IconChevronRightFill />}>라벨</ActionButton>;\n}",
  "control-chip-small": "import { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ActionChipSmall() {\n  return <ControlChip.Toggle size=\"small\">라벨</ControlChip.Toggle>;\n}",
  "text-field-form": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { useState, useCallback, type FormEvent } from \"react\";\nimport { Column, Columns, Stack } from \"seed-design/ui/layout\";\n\ninterface FormValues {\n  name: string;\n  address: string;\n}\n\ntype FieldErrors = Record<keyof FormValues, string | null>;\n\nexport default function TextFieldForm() {\n  const [formValues, setFormValues] = useState<FormValues>({\n    name: \"\",\n    address: \"\",\n  });\n\n  const [fieldErrors, setFieldStates] = useState<FieldErrors>({\n    name: null,\n    address: null,\n  });\n\n  const validateForm = useCallback((): boolean => {\n    let isValid = true;\n\n    const newFieldErrors: FieldErrors = {\n      name: null,\n      address: null,\n    };\n\n    // Name validation\n    if (!formValues.name) {\n      newFieldErrors.name = \"필수 입력 항목입니다\";\n      isValid = false;\n    }\n\n    if (!formValues.address.startsWith(\"대한민국\")) {\n      newFieldErrors.address = \"대한민국으로 시작해주세요\";\n      isValid = false;\n    }\n\n    if (!formValues.address) {\n      newFieldErrors.address = \"필수 입력 항목입니다\";\n      isValid = false;\n    }\n\n    setFieldStates(newFieldErrors);\n\n    return isValid;\n  }, [formValues]);\n\n  const handleSubmit = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n\n      if (validateForm()) {\n        window.alert(JSON.stringify(formValues, null, 2));\n      }\n    },\n    [formValues, validateForm],\n  );\n\n  const handleReset = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    setFormValues({ name: \"\", address: \"\" });\n    setFieldStates({ name: null, address: null });\n  }, []);\n\n  const handleNameChange = (value: string) => {\n    setFormValues((prev) => ({ ...prev, name: value }));\n    setFieldStates((prev) => ({ ...prev, name: null }));\n  };\n\n  const handleAddressChange = (value: string) => {\n    setFormValues((prev) => ({ ...prev, address: value }));\n    setFieldStates((prev) => ({ ...prev, address: null }));\n  };\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit} onReset={handleReset}>\n      <Columns gap=\"s2\">\n        <Column>\n          <TextField\n            label=\"이름\"\n            indicator=\"(필수)\"\n            description=\"이름을 써주세요\"\n            required\n            value={formValues.name}\n            onValueChange={({ value }) => handleNameChange(value)}\n            {...(fieldErrors.name && { invalid: true, errorMessage: fieldErrors.name })}\n          >\n            <TextFieldInput placeholder=\"홍길동\" />\n          </TextField>\n        </Column>\n        <Column>\n          <TextField\n            label=\"주소\"\n            indicator=\"(필수)\"\n            description=\"주소를 써주세요\"\n            maxGraphemeCount={30}\n            required\n            value={formValues.address}\n            onValueChange={({ slicedValue }) => handleAddressChange(slicedValue)}\n            {...(fieldErrors.address && { invalid: true, errorMessage: fieldErrors.address })}\n          >\n            <TextFieldInput placeholder=\"대한민국\" />\n          </TextField>\n        </Column>\n      </Columns>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "multiline-text-field-formatting": "import { useMemo, useState } from \"react\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldFormatting() {\n  const [value, setValue] = useState(\"\");\n\n  const formattedValue = useMemo(\n    () =>\n      value\n        .split(\"\")\n        .filter((char) => char !== \" \")\n        .join(\"\"),\n    [value],\n  );\n\n  return (\n    <TextField\n      label=\"레이블\"\n      description=\"공백을 입력할 수 없어요\"\n      value={formattedValue}\n      onValueChange={({ value }) => setValue(value)}\n    >\n      <TextFieldTextarea placeholder=\"공백을 입력해보세요\" />\n    </TextField>\n  );\n}",
  "badge-large": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeLarge() {\n  return <Badge size=\"large\">라벨</Badge>;\n}",
  "reaction-button-xsmall": "import { IconFaceSmileCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { ReactionButton } from \"seed-design/ui/reaction-button\";\n\nexport default function ReactionButtonXsmall() {\n  return (\n    <ReactionButton prefixIcon={<IconFaceSmileCircleFill />} size=\"xsmall\" count={1}>\n      도움돼요\n    </ReactionButton>\n  );\n}",
  "action-button-loading": "import { useState } from \"react\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonLoading() {\n  const [loading, setLoading] = useState(false);\n\n  function handleClick() {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 2000);\n  }\n\n  // 이벤트 핸들링이 필요할 수 있으므로 loading은 disabled를 포함하지 않습니다. 이벤트 발생을 원하지 않는 경우, disabled 속성을 추가해주세요.\n  return (\n    <ActionButton loading={loading} onClick={handleClick}>\n      시간이 걸리는 액션\n    </ActionButton>\n  );\n}",
  "help-bubble-flip": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { HelpBubbleTrigger } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubbleFlip() {\n  return (\n    <HelpBubbleTrigger\n      open\n      flip={false}\n      title=\"Flip\"\n      description=\"Flip을 끄면 화면 경계에서 방향이 바뀌지 않아요.\"\n    >\n      <ActionButton>열기</ActionButton>\n    </HelpBubbleTrigger>\n  );\n}",
  "multiline-text-field-grapheme-count": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldGraphemeCount() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" maxGraphemeCount={8}>\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "multiline-text-field-xlarge": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldXlarge() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"xlarge\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "action-button-brand-outline": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonBrandOutline() {\n  return <ActionButton variant=\"brandOutline\">라벨</ActionButton>;\n}",
  "switch-preview": "import { useState } from \"react\";\nimport { Switch } from \"seed-design/ui/switch\";\n\nexport default function SwitchPreview() {\n  const [isChecked, setIsChecked] = useState(false);\n\n  return <Switch checked={isChecked} onCheckedChange={setIsChecked} />;\n}",
  "snackbar-preview": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { Snackbar, SnackbarProvider, useSnackbarAdapter } from \"seed-design/ui/snackbar\";\n\nfunction Component() {\n  const adapter = useSnackbarAdapter();\n\n  return (\n    <ActionButton\n      onClick={() =>\n        adapter.create({\n          timeout: 5000,\n          onClose: () => {},\n          render: () => <Snackbar message=\"알림 메세지\" actionLabel=\"확인\" onAction={() => {}} />,\n        })\n      }\n    >\n      실행\n    </ActionButton>\n  );\n}\n\nexport default function SnackbarPreview() {\n  return (\n    <SnackbarProvider>\n      <Component />\n    </SnackbarProvider>\n  );\n}",
  "badge-outline": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeOutline() {\n  return <Badge variant=\"outline\">라벨</Badge>;\n}",
  "toggle-button-neutral-weak": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonBrandSolid() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton variant=\"neutralWeak\" pressed={pressed} onPressedChange={setPressed}>\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "checkbox-preview": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxPreview() {\n  return <Checkbox label=\"Hello World\" />;\n}",
  "progress-circle-24": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircle24() {\n  return <ProgressCircle size=\"24\" />;\n}",
  "tabs-size-small": "import { TabsRoot, TabsTrigger, TabsList, TabsContent } from \"seed-design/ui/tabs\";\n\nexport default function TabsSizeSmall() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\" size=\"small\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "toggle-button-prefix-icon": "import { IconCheckmarkLine, IconPlusLine } from \"@daangn/react-monochrome-icon\";\nimport { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonPrefixIcon() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton\n      prefixIcon={pressed ? <IconPlusLine /> : <IconCheckmarkLine />}\n      pressed={pressed}\n      onPressedChange={setPressed}\n    >\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "checkbox-long-text": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxLongText() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n      <Checkbox\n        size=\"medium\"\n        label=\"Lorem ipsum dolor sit, amet consectetur adipisicing elit. At a eaque fugiat sint sapiente.\n          Id, hic ex, blanditiis totam animi amet delectus temporibus quae fugiat magnam, quos eaque\n          dolorum a? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Possimus labore unde\n          minus temporibus beatae commodi et nesciunt iure in dignissimos suscipit, alias ab\n          voluptatem facilis tempora numquam. Veritatis, dolorum suscipit! Lorem ipsum dolor sit,\n          amet consectetur adipisicing elit. Explicabo fugiat molestias iusto, ipsum distinctio\n          officia ad id ratione esse ducimus architecto deleniti illum reiciendis rerum, at\n          blanditiis molestiae. Cupiditate, nobis? Lorem ipsum dolor sit amet consectetur\n          adipisicing elit. Ab, magni. Aliquid inventore quaerat nemo architecto harum earum quas\n          porro repudiandae explicabo repellat repellendus magni, corporis omnis laborum, velit\n          dicta blanditiis. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Debitis,\n          eveniet quas. Accusamus facere veritatis expedita delectus, asperiores numquam placeat\n          necessitatibus assumenda, nesciunt in dolorem sit provident repellendus, voluptatem earum!\n          Consequatur. Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aut earum\n          asperiores aliquam magnam est delectus veritatis numquam sint porro tenetur dolores nobis,\n          deleniti voluptas quaerat, quia voluptatum soluta autem perspiciatis? Lorem ipsum dolor\n          sit amet consectetur adipisicing elit. Facilis possimus eaque aliquam maxime? Quidem enim,\n          sed itaque at veritatis nihil officia esse qui provident ipsa adipisci necessitatibus\n          officiis distinctio laborum!\"\n      />\n      <Checkbox\n        size=\"large\"\n        label=\"Lorem ipsum dolor sit, amet consectetur adipisicing elit. At a eaque fugiat sint sapiente.\n          Id, hic ex, blanditiis totam animi amet delectus temporibus quae fugiat magnam, quos eaque\n          dolorum a? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Possimus labore unde\n          minus temporibus beatae commodi et nesciunt iure in dignissimos suscipit, alias ab\n          voluptatem facilis tempora numquam. Veritatis, dolorum suscipit! Lorem ipsum dolor sit,\n          amet consectetur adipisicing elit. Explicabo fugiat molestias iusto, ipsum distinctio\n          officia ad id ratione esse ducimus architecto deleniti illum reiciendis rerum, at\n          blanditiis molestiae. Cupiditate, nobis? Lorem ipsum dolor sit amet consectetur\n          adipisicing elit. Ab, magni. Aliquid inventore quaerat nemo architecto harum earum quas\n          porro repudiandae explicabo repellat repellendus magni, corporis omnis laborum, velit\n          dicta blanditiis. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Debitis,\n          eveniet quas. Accusamus facere veritatis expedita delectus, asperiores numquam placeat\n          necessitatibus assumenda, nesciunt in dolorem sit provident repellendus, voluptatem earum!\n          Consequatur. Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aut earum\n          asperiores aliquam magnam est delectus veritatis numquam sint porro tenetur dolores nobis,\n          deleniti voluptas quaerat, quia voluptatum soluta autem perspiciatis? Lorem ipsum dolor\n          sit amet consectetur adipisicing elit. Facilis possimus eaque aliquam maxime? Quidem enim,\n          sed itaque at veritatis nihil officia esse qui provident ipsa adipisci necessitatibus\n          officiis distinctio laborum!\"\n      />\n    </div>\n  );\n}",
  "text-field-read-only": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { Columns, Column } from \"seed-design/ui/layout\";\n\nexport default function TextFieldReadOnly() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" readOnly>\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          readOnly\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "toggle-button-disabled": "import { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonDisabled() {\n  return <ToggleButton disabled>비활성</ToggleButton>;\n}",
  "stack-preview": "import { Box, Stack } from \"seed-design/ui/layout\";\n\nexport default function StackPreview() {\n  return (\n    <Stack background=\"bg.layerDefault\" gap=\"s2\" width=\"full\" borderRadius=\"s2\">\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        1\n      </Box>\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        2\n      </Box>\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        3\n      </Box>\n    </Stack>\n  );\n}",
  "chip-tabs-basic-activity": "import * as React from \"react\";\n\nimport { ChipTabsRoot, ChipTabsTrigger, ChipTabsList } from \"seed-design/ui/chip-tabs\";\n\nimport type { ActivityComponentType } from \"@stackflow/react/future\";\nimport AppScreen from \"@/components/stackflow/ActivityLayout\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"chip-tabs-basic\": unknown;\n  }\n}\n\nconst ChipTabsBasicActivity: ActivityComponentType<\"chip-tabs-basic\"> = () => {\n  const [value, setValue] = React.useState(\"1\");\n\n  const commonStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#eeeeee\",\n    height: \"100%\",\n  };\n\n  return (\n    <AppScreen>\n      <ChipTabsRoot\n        variant=\"neutralSolid\"\n        defaultValue=\"1\"\n        value={value}\n        onValueChange={(value) => setValue(value)}\n      >\n        <ChipTabsList>\n          <ChipTabsTrigger value=\"1\">라벨1</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"2\">라벨2</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"3\">라벨3</ChipTabsTrigger>\n        </ChipTabsList>\n      </ChipTabsRoot>\n      {value === \"1\" && <div style={commonStyle}>content 1</div>}\n      {value === \"2\" && <div style={commonStyle}>content 2</div>}\n      {value === \"3\" && <div style={commonStyle}>content 3</div>}\n    </AppScreen>\n  );\n};\n\nexport default ChipTabsBasicActivity;",
  "action-chip-prefix-icon": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipPrefixIcon() {\n  return <ActionChip prefixIcon={<IconPlusFill />}>라벨</ActionChip>;\n}",
  "error-state-basement": "import { Stack } from \"@seed-design/react\";\nimport { ErrorState } from \"seed-design/ui/error-state\";\n\nexport default function ErrorStateBasement() {\n  return (\n    <Stack minHeight=\"480px\" width=\"320px\" borderWidth={1} borderColor=\"stroke.neutral\">\n      <ErrorState\n        variant=\"basement\"\n        title=\"에러 타이틀\"\n        description=\"Lorem ipsum dolor sit amet consectetur adipisicing elit.\"\n        primaryActionProps={{\n          children: \"메인 액션\",\n        }}\n        secondaryActionProps={{\n          children: \"보조 액션\",\n        }}\n      />\n    </Stack>\n  );\n}",
  "multiline-text-field-constraints": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldConstraints() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\">\n      <TextFieldTextarea\n        placeholder=\"플레이스홀더\"\n        style={{ minHeight: \"200px\", maxHeight: \"300px\" }}\n      />\n    </TextField>\n  );\n}",
  "error-state-preview": "import { Stack } from \"@seed-design/react\";\nimport { ErrorState } from \"seed-design/ui/error-state\";\n\nexport default function ErrorStatePreview() {\n  return (\n    <Stack minHeight=\"480px\" width=\"320px\" borderWidth={1} borderColor=\"stroke.neutral\">\n      <ErrorState\n        title=\"에러 타이틀\"\n        description=\"Lorem ipsum dolor sit amet consectetur adipisicing elit.\"\n        primaryActionProps={{\n          children: \"메인 액션\",\n        }}\n        secondaryActionProps={{\n          children: \"보조 액션\",\n        }}\n      />\n    </Stack>\n  );\n}",
  "tabs-swipeable": "import { TabsRoot, TabsList, TabsTrigger, TabsCarousel, TabsContent } from \"seed-design/ui/tabs\";\n\nexport default function TabsSwipeable() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"2\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsCarousel swipeable>\n          <TabsContent value=\"1\">\n            <Content>Content 1</Content>\n          </TabsContent>\n          <TabsContent value=\"2\">\n            <Content>Content 2</Content>\n          </TabsContent>\n          <TabsContent value=\"3\">\n            <Content>Content 3</Content>\n          </TabsContent>\n        </TabsCarousel>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "action-button-neutral-solid": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonNeutralSolid() {\n  return <ActionButton variant=\"neutralSolid\">라벨</ActionButton>;\n}",
  "multiline-text-field-read-only": "import { Column, Columns } from \"seed-design/ui/layout\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldReadOnly() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" readOnly>\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          readOnly\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "badge-brand": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeBrand() {\n  return <Badge tone=\"brand\">라벨</Badge>;\n}",
  "avatar-size": "import { Avatar } from \"seed-design/ui/avatar\";\nimport { Flex } from \"seed-design/ui/layout\";\n\nexport default function AvatarSize() {\n  return (\n    <Flex gap=\"s4\">\n      <Avatar size=\"20\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"24\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"36\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"48\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"64\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"80\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n      <Avatar size=\"96\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n    </Flex>\n  );\n}",
  "progress-circle-indeterminate": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCirclePreview() {\n  // if you want to show an indeterminate progress circle, you can pass `undefined` or omit the `value` prop\n  return <ProgressCircle value={undefined} />;\n}",
  "action-button-brand-solid": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonBrandSolid() {\n  return <ActionButton variant=\"brandSolid\">라벨</ActionButton>;\n}",
  "text-field-react-hook-form": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { useController, useForm } from \"react-hook-form\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { useCallback, type FormEvent } from \"react\";\nimport { Column, Columns, Stack } from \"seed-design/ui/layout\";\n\ninterface FormValues {\n  name: string;\n  address: string;\n}\n\nexport default function TextFieldReactHookForm() {\n  const { handleSubmit, reset, control } = useForm<FormValues>({\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n    },\n  });\n\n  const { field: nameField, fieldState: nameFieldState } = useController({\n    name: \"name\",\n    control,\n    rules: {\n      required: \"필수 입력 항목입니다\",\n    },\n  });\n  const {\n    field: { onChange: addressOnChange, ...addressField },\n    fieldState: addressFieldState,\n  } = useController({\n    name: \"address\",\n    control,\n    rules: {\n      required: \"필수 입력 항목입니다\",\n      pattern: { value: /^대한민국/, message: \"대한민국으로 시작해주세요\" },\n    },\n  });\n\n  const onValid = useCallback((data: FormValues) => {\n    window.alert(JSON.stringify(data, null, 2));\n  }, []);\n\n  const onReset = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      reset();\n    },\n    [reset],\n  );\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit(onValid)} onReset={onReset}>\n      <Columns gap=\"s2\">\n        <Column>\n          <TextField\n            label=\"이름\"\n            indicator=\"(필수)\"\n            description=\"이름을 써주세요\"\n            invalid={nameFieldState.invalid}\n            errorMessage={nameFieldState.error?.message}\n            required\n            {...nameField}\n          >\n            <TextFieldInput placeholder=\"홍길동\" />\n          </TextField>\n        </Column>\n        <Column>\n          <TextField\n            label=\"주소\"\n            indicator=\"(필수)\"\n            description=\"주소를 써주세요\"\n            invalid={addressFieldState.invalid}\n            errorMessage={addressFieldState.error?.message}\n            maxGraphemeCount={30}\n            onValueChange={({ slicedValue }) => addressOnChange(slicedValue)}\n            required\n            {...addressField}\n          >\n            <TextFieldInput placeholder=\"대한민국\" />\n          </TextField>\n        </Column>\n      </Columns>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "text-button-small": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonSmall() {\n  return (\n    <TextButton tone=\"neutral\" icon={<IconPlusCircleLine />} size=\"small\">\n      추가\n    </TextButton>\n  );\n}",
  "checkbox-indeterminate": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxIndeterminate() {\n  return <Checkbox defaultChecked label=\"indeterminate\" indeterminate />;\n}",
  "text-button-brand": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonBrand() {\n  return (\n    <TextButton tone=\"brand\" icon={<IconPlusCircleLine />}>\n      추가\n    </TextButton>\n  );\n}",
  "progress-circle-small": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCirclePreview() {\n  return <ProgressCircle size=\"40\" />;\n}",
  "inline-banner-activity": "import * as React from \"react\";\n\nimport { InlineBanner, type InlineBannerProps } from \"seed-design/ui/inline-banner\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nimport type { ActivityComponentType } from \"@stackflow/react/future\";\nimport AppScreen from \"@/components/stackflow/ActivityLayout\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"inline-banner\": unknown;\n  }\n}\n\nconst InlineBannerActivity: ActivityComponentType<\"inline-banner\"> = () => {\n  const [variant, setVariant] =\n    React.useState<Extract<InlineBannerProps[\"variant\"], \"neutralWeak\" | \"criticalSolid\">>(\n      \"criticalSolid\",\n    );\n\n  return (\n    <AppScreen>\n      <InlineBanner\n        description=\"Lorem ipsum dolor sit amet consectetur adipisicing elit.\"\n        variant={variant}\n        {...(variant === \"criticalSolid\" && { style: { position: \"sticky\", top: 0 } })}\n      />\n      <div style={{ display: \"flex\", flexDirection: \"column\", padding: \"1rem\", gap: \"0.75rem\" }}>\n        <ActionButton\n          onClick={() =>\n            setVariant((prev) => (prev === \"criticalSolid\" ? \"neutralWeak\" : \"criticalSolid\"))\n          }\n        >\n          Toggle tone\n        </ActionButton>\n        <p style={{ marginBlock: 0, lineHeight: 1.35 }}>\n          Lorem ipsum dolor sit, amet consectetur adipisicing elit. At a eaque fugiat sint sapiente.\n          Id, hic ex, blanditiis totam animi amet delectus temporibus quae fugiat magnam, quos eaque\n          dolorum a? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Possimus labore unde\n          minus temporibus beatae commodi et nesciunt iure in dignissimos suscipit, alias ab\n          voluptatem facilis tempora numquam. Veritatis, dolorum suscipit! Lorem ipsum dolor sit,\n          amet consectetur adipisicing elit. Explicabo fugiat molestias iusto, ipsum distinctio\n          officia ad id ratione esse ducimus architecto deleniti illum reiciendis rerum, at\n          blanditiis molestiae. Cupiditate, nobis? Lorem ipsum dolor sit amet consectetur\n          adipisicing elit. Ab, magni. Aliquid inventore quaerat nemo architecto harum earum quas\n          porro repudiandae explicabo repellat repellendus magni, corporis omnis laborum, velit\n          dicta blanditiis. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Debitis,\n          eveniet quas. Accusamus facere veritatis expedita delectus, asperiores numquam placeat\n          necessitatibus assumenda, nesciunt in dolorem sit provident repellendus, voluptatem earum!\n          Consequatur. Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aut earum\n          asperiores aliquam magnam est delectus veritatis numquam sint porro tenetur dolores nobis,\n          deleniti voluptas quaerat, quia voluptatum soluta autem perspiciatis? Lorem ipsum dolor\n          sit amet consectetur adipisicing elit. Facilis possimus eaque aliquam maxime? Quidem enim,\n          sed itaque at veritatis nihil officia esse qui provident ipsa adipisci necessitatibus\n          officiis distinctio laborum!\n        </p>\n      </div>\n    </AppScreen>\n  );\n};\n\nexport default InlineBannerActivity;",
  "progress-circle-brand": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircleBrand() {\n  return <ProgressCircle tone=\"brand\" />;\n}",
  "app-screen-preview": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport type { ActivityComponentType } from \"@stackflow/react/future\";\nimport {\n  AppBar,\n  AppBarCloseButton,\n  AppBarIconButton,\n  AppBarLeft,\n  AppBarMain,\n  AppBarRight,\n} from \"seed-design/ui/app-bar\";\nimport { AppScreen, AppScreenContent } from \"seed-design/ui/app-screen\";\nimport { Flex } from \"seed-design/ui/layout\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"app-screen-preview\": unknown;\n  }\n}\n\nconst AppScreenPreviewActivity: ActivityComponentType<\"app-screen-preview\"> = () => {\n  return (\n    <AppScreen theme=\"cupertino\">\n      <AppBar>\n        <AppBarLeft>\n          <AppBarCloseButton />\n        </AppBarLeft>\n        <AppBarMain>Preview</AppBarMain>\n        <AppBarRight>\n          <AppBarIconButton aria-label=\"Notification\">\n            <IconBellFill />\n          </AppBarIconButton>\n        </AppBarRight>\n      </AppBar>\n      <AppScreenContent>\n        <Flex height=\"full\" justifyContent=\"center\" alignItems=\"center\">\n          Preview\n        </Flex>\n      </AppScreenContent>\n    </AppScreen>\n  );\n};\n\nexport default AppScreenPreviewActivity;",
  "checkbox-size": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxSize() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n      <Checkbox label=\"Medium (default)\" size=\"medium\" />\n      <Checkbox label=\"Large\" size=\"large\" />\n    </div>\n  );\n}",
  "reaction-button-preview": "import { IconFaceSmileCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { ReactionButton } from \"seed-design/ui/reaction-button\";\n\nexport default function ReactionButtonPreview() {\n  return (\n    <ReactionButton prefixIcon={<IconFaceSmileCircleFill />} count={1}>\n      도움돼요\n    </ReactionButton>\n  );\n}",
  "callout-magic": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutMagic() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        tone=\"magic\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        tone=\"magic\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        tone=\"magic\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "action-button-prefix-icon": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonPrefixIcon() {\n  return <ActionButton prefixIcon={<IconPlusFill />}>라벨</ActionButton>;\n}",
  "help-bubble-anchor": "import { Avatar } from \"seed-design/ui/avatar\";\nimport { HelpBubbleAnchor } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubbleAnchorExample() {\n  return (\n    <HelpBubbleAnchor\n      open={true}\n      title=\"Anchor\"\n      description=\"클릭으로 열고 닫는 동작 없이 위치만 지정합니다.\"\n    >\n      <Avatar size=\"96\" src=\"https://avatars.githubusercontent.com/u/54893898?v=4\" fallback=\"L\" />\n    </HelpBubbleAnchor>\n  );\n}",
  "help-bubble-placement": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { HelpBubbleTrigger } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubblePreview() {\n  return (\n    <HelpBubbleTrigger\n      open\n      placement=\"bottom\"\n      title=\"Placement\"\n      description=\"Placement로 기본 위치를 설정할 수 있어요.\"\n    >\n      <ActionButton>열기</ActionButton>\n    </HelpBubbleTrigger>\n  );\n}",
  "inline-banner-with-all": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerWithAll() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        icon={<IconBellFill />}\n        title=\"타이틀\"\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        icon={<IconBellFill />}\n        title=\"타이틀\"\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        icon={<IconBellFill />}\n        title=\"타이틀\"\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "badge-informative": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeInformative() {\n  return <Badge tone=\"informative\">라벨</Badge>;\n}",
  "alert-dialog-single": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"seed-design/ui/alert-dialog\";\n\nconst AlertDialogSingle = () => {\n  // You can set z-index dialog with \"--layer-index\" custom property. useful for stackflow integration.\n  return (\n    <AlertDialogRoot>\n      <AlertDialogTrigger asChild>\n        <ActionButton>열기</ActionButton>\n      </AlertDialogTrigger>\n      <AlertDialogContent layerIndex={50}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>제목</AlertDialogTitle>\n          <AlertDialogDescription>단일 선택지를 제공합니다.</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogAction asChild>\n            <ActionButton variant=\"neutralSolid\">확인</ActionButton>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  );\n};\n\nexport default AlertDialogSingle;",
  "text-button-medium": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonMedium() {\n  return (\n    <TextButton tone=\"neutral\" icon={<IconPlusCircleLine />} size=\"medium\">\n      추가\n    </TextButton>\n  );\n}",
  "toggle-button-brand-solid": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonBrandSolid() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton variant=\"brandSolid\" pressed={pressed} onPressedChange={setPressed}>\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "toggle-button-loading": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonLoading() {\n  const [pressed, setPressed] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  function handleToggle() {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setPressed((prev) => !prev);\n    }, 2000);\n  }\n\n  // 이벤트 핸들링이 필요할 수 있으므로 loading은 disabled를 포함하지 않습니다. 이벤트 발생을 원하지 않는 경우, disabled 속성을 추가해주세요.\n  return (\n    <ToggleButton loading={loading} pressed={pressed} onPressedChange={handleToggle}>\n      시간이 걸리는 토글\n    </ToggleButton>\n  );\n}",
  "inline-banner-informative-weak": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconILowercaseSerifCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerInformativeWeak() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"informativeWeak\"\n        icon={<IconILowercaseSerifCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"informativeWeak\"\n        icon={<IconILowercaseSerifCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        variant=\"informativeWeak\"\n        icon={<IconILowercaseSerifCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "text-field-enabled": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { Column, Columns } from \"seed-design/ui/layout\";\n\nexport default function TextFieldEnabled() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\">\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "help-bubble-close-button": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { HelpBubbleTrigger } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubbleCloseButton() {\n  return (\n    <HelpBubbleTrigger\n      defaultOpen\n      showCloseButton\n      title=\"Close Button\"\n      description=\"showCloseButton으로 닫기 버튼을 추가할 수 있어요.\"\n    >\n      <ActionButton>열기</ActionButton>\n    </HelpBubbleTrigger>\n  );\n}",
  "segmented-control-long-label-fixed-width": "import { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\n\nexport default function SegmentedControlLongLabelFixedWidth() {\n  return (\n    <SegmentedControl defaultValue=\"price\" style={{ width: \"600px\" }} aria-label=\"정렬 기준\">\n      <SegmentedControlItem value=\"price\">가격 높은 순</SegmentedControlItem>\n      <SegmentedControlItem value=\"discount\">할인율 높은 순</SegmentedControlItem>\n      <SegmentedControlItem value=\"popularity\">인기 많은 순</SegmentedControlItem>\n    </SegmentedControl>\n  );\n}",
  "action-chip-suffix-icon": "import { IconChevronDownFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipSuffixIcon() {\n  return <ActionChip suffixIcon={<IconChevronDownFill />}>라벨</ActionChip>;\n}",
  "action-button-disabled": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonDisabled() {\n  return <ActionButton disabled>라벨</ActionButton>;\n}",
  "callout-text-only": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutTextOnly() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\" />\n      <ActionableCallout description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\" />\n      <DismissibleCallout description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\" />\n    </Stack>\n  );\n}",
  "snackbar-avoid-overlap": "import { Flex } from \"seed-design/ui/layout\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  Snackbar,\n  SnackbarAvoidOverlap,\n  SnackbarProvider,\n  useSnackbarAdapter,\n} from \"seed-design/ui/snackbar\";\n\nfunction Component() {\n  const adapter = useSnackbarAdapter();\n\n  return (\n    <Flex direction=\"column\" gap=\"s4\">\n      <ActionButton\n        onClick={() =>\n          adapter.create({\n            timeout: 5000,\n            onClose: () => {},\n            render: () => <Snackbar message=\"알림 메세지\" actionLabel=\"확인\" onAction={() => {}} />,\n          })\n        }\n      >\n        실행\n      </ActionButton>\n      <SnackbarAvoidOverlap>\n        <Flex\n          width=\"full\"\n          height=\"s16\"\n          background=\"bg.criticalWeak\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          Snackbar가 이 영역과 겹치지 않게 조정됩니다. 스크롤은 무시합니다.\n        </Flex>\n      </SnackbarAvoidOverlap>\n    </Flex>\n  );\n}\n\nexport default function SnackbarPreview() {\n  return (\n    <SnackbarProvider>\n      <Component />\n    </SnackbarProvider>\n  );\n}",
  "extended-fab-layer-floating": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\n\nexport default function ExtendedFabLayerFloating() {\n  return (\n    <ExtendedFab variant=\"layerFloating\" prefixIcon={<IconBellFill />}>\n      알림 설정\n    </ExtendedFab>\n  );\n}",
  "inline-banner-link-label-as-child": "import { InlineBanner } from \"seed-design/ui/inline-banner\";\n\nexport default function InlineBannerLinkLabelAsChild() {\n  return (\n    <InlineBanner\n      description=\"사업자 정보를 등록해주세요.\"\n      linkProps={{\n        asChild: true,\n        children: (\n          <a href=\"https://www.daangn.com\" target=\"_blank\" rel=\"noreferrer\">\n            자세히 보기\n          </a>\n        ),\n      }}\n    />\n  );\n}",
  "reaction-button-small": "import { IconFaceSmileCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { ReactionButton } from \"seed-design/ui/reaction-button\";\n\nexport default function ReactionButtonSmall() {\n  return (\n    <ReactionButton prefixIcon={<IconFaceSmileCircleFill />} size=\"small\" count={1}>\n      도움돼요\n    </ReactionButton>\n  );\n}",
  "text-field-suffix": "import { IconWonLine } from \"@daangn/react-monochrome-icon\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { Columns, Column } from \"seed-design/ui/layout\";\n\nexport default function TextFieldSuffix() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" suffix=\"cm\">\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" suffixIcon={<IconWonLine />}>\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "manner-temp-badge-preview": "import { Stack } from \"seed-design/ui/layout\";\nimport { MannerTempBadge } from \"seed-design/ui/manner-temp-badge\";\n\nexport default function BadgePreview() {\n  return (\n    <Stack gap=\"s1\">\n      <MannerTempBadge temperature={12.5} />\n      <MannerTempBadge temperature={36.2} />\n      <MannerTempBadge temperature={36.5} />\n      <MannerTempBadge temperature={41.9} />\n      <MannerTempBadge temperature={51.9} />\n      <MannerTempBadge temperature={52} />\n    </Stack>\n  );\n}",
  "text-field-preview": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldPreview() {\n  return (\n    <TextField>\n      <TextFieldInput autoFocus />\n    </TextField>\n  );\n}",
  "progress-circle-40": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircle40() {\n  return <ProgressCircle size=\"40\" />;\n}",
  "skeleton-radius": "import { Skeleton } from \"seed-design/ui/skeleton\";\nimport { Flex } from \"seed-design/ui/layout\";\n\nexport default function SkeletonRadius() {\n  return (\n    <Flex gap=\"s4\" alignItems=\"center\">\n      <Skeleton radius=\"0\" width=\"s12\" height=\"s12\" />\n      <Skeleton radius=\"8\" width=\"s12\" height=\"s12\" />\n      <Skeleton radius=\"16\" width=\"s12\" height=\"s12\" />\n      <Skeleton radius=\"full\" width=\"s12\" height=\"s12\" />\n    </Flex>\n  );\n}",
  "fab-preview": "import IconPlusLine from \"@daangn/react-monochrome-icon/IconPlusLine\";\nimport { Fab } from \"seed-design/ui/fab\";\n\nexport default function FabPreview() {\n  return (\n    <Fab aria-label=\"Example FAB\">\n      <IconPlusLine />\n    </Fab>\n  );\n}",
  "multiline-text-field-medium": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldMedium() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"medium\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "callout-with-icon": "import { IconCalendarFill } from \"@daangn/react-monochrome-icon\";\nimport { Callout } from \"seed-design/ui/callout\";\n\nexport default function CalloutWithIcon() {\n  return (\n    <Callout\n      icon={<IconCalendarFill />}\n      description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n    />\n  );\n}",
  "callout-informative": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutInformative() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        tone=\"informative\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        tone=\"informative\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        tone=\"informative\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "inline-banner-preview": "import { Stack } from \"seed-design/ui/layout\";\nimport {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\n\nexport default function InlineBannerPreview() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner description=\"Ut veniam in ea ea anim laborum magna dolore ea laborum duis ut aute mollit amet.\" />\n      <ActionableInlineBanner description=\"Ut veniam in ea ea anim laborum magna dolore ea laborum duis ut aute mollit amet.\" />\n      <DismissibleInlineBanner description=\"Ut veniam in ea ea anim laborum magna dolore ea laborum duis ut aute mollit amet.\" />\n    </Stack>\n  );\n}",
  "multiline-text-field-slicing": "import { useState } from \"react\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldSlicing() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <TextField\n      label=\"라벨\"\n      description=\"6글자까지 입력 가능합니다\"\n      maxGraphemeCount={6}\n      value={value}\n      onValueChange={({ slicedValue }) => setValue(slicedValue)}\n    >\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "callout-link-label-as-child": "import { Stack } from \"seed-design/ui/layout\";\nimport { Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutLinkLabelAsChild() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n        linkProps={{\n          asChild: true,\n          children: (\n            <a href=\"https://www.daangn.com\" target=\"_blank\" rel=\"noreferrer\">\n              시도해 보기\n            </a>\n          ),\n        }}\n      />\n      <DismissibleCallout\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n        linkProps={{\n          asChild: true,\n          children: (\n            <a href=\"https://www.daangn.com\" target=\"_blank\" rel=\"noreferrer\">\n              시도해 보기\n            </a>\n          ),\n        }}\n      />\n    </Stack>\n  );\n}",
  "tabs-size-medium": "import { TabsContent, TabsList, TabsRoot, TabsTrigger } from \"seed-design/ui/tabs\";\n\nexport default function TabsSizeMedium() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\" size=\"medium\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "switch-disabled": "import { Switch } from \"seed-design/ui/switch\";\n\nexport default function SwitchDisabled() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: 10 }}>\n      <Switch disabled />\n      <Switch checked disabled />\n    </div>\n  );\n}",
  "text-button-icon-first": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonIconFirst() {\n  return (\n    <TextButton layout=\"iconFirst\" icon={<IconPlusCircleLine />}>\n      추가\n    </TextButton>\n  );\n}",
  "tabs-notification": "import { TabsRoot, TabsContent, TabsTrigger, TabsList } from \"seed-design/ui/tabs\";\n\nexport default function TabsNotification() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\" notification>\n            라벨2\n          </TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "checkbox-variant": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxVariant() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n      <Checkbox label=\"Square (default)\" variant=\"square\" />\n      <Checkbox label=\"Ghost\" variant=\"ghost\" />\n    </div>\n  );\n}",
  "action-button-neutral-weak": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonNeutralWeak() {\n  return <ActionButton variant=\"neutralWeak\">라벨</ActionButton>;\n}",
  "radio-select-box-react-hook-form": "import { Column, Columns, Stack } from \"@seed-design/react\";\nimport { useCallback, type FormEvent } from \"react\";\nimport { useController, useForm } from \"react-hook-form\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport { RadioSelectBoxItem, RadioSelectBoxRoot } from \"seed-design/ui/select-box\";\n\nconst POSSIBLE_FRUIT_VALUES = [\"apple\", \"melon\", \"mango\"] as const;\n\ninterface FormValues {\n  fruit: (typeof POSSIBLE_FRUIT_VALUES)[number];\n}\n\nexport default function RadioSelectBoxReactHookForm() {\n  const { handleSubmit, reset, setValue, control } = useForm<FormValues>({\n    defaultValues: {\n      fruit: \"melon\",\n    },\n  });\n  const { field } = useController({ name: \"fruit\", control });\n\n  const onValid = useCallback((data: FormValues) => {\n    window.alert(JSON.stringify(data, null, 2));\n  }, []);\n\n  const onReset = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      reset();\n    },\n    [reset],\n  );\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit(onValid)} onReset={onReset}>\n      <RadioSelectBoxRoot aria-label=\"Fruit\" {...field}>\n        <Stack gap=\"spacingY.componentDefault\">\n          {POSSIBLE_FRUIT_VALUES.map((value) => (\n            <RadioSelectBoxItem key={value} value={value} label={value} />\n          ))}\n        </Stack>\n      </RadioSelectBoxRoot>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column width=\"content\">\n          <ActionButton\n            type=\"button\"\n            variant=\"neutralWeak\"\n            onClick={() => setValue(\"fruit\", \"mango\")}\n          >\n            mango 선택\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "control-chip-prefix-icon": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ControlChipPrefixIcon() {\n  return <ControlChip.Toggle prefixIcon={<IconPlusFill />}>라벨</ControlChip.Toggle>;\n}",
  "segmented-control-disabled": "import { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\n\nexport default function SegmentedControlPreview() {\n  return (\n    <SegmentedControl defaultValue=\"Hot\" disabled aria-label=\"Sort by\">\n      <SegmentedControlItem value=\"Hot\">Hot</SegmentedControlItem>\n      <SegmentedControlItem value=\"New\">New</SegmentedControlItem>\n    </SegmentedControl>\n  );\n}",
  "text-button-neutral-subtle": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonNeutralSubtle() {\n  return (\n    <TextButton tone=\"neutralSubtle\" icon={<IconPlusCircleLine />}>\n      추가\n    </TextButton>\n  );\n}",
  "chip-tabs-preview": "import * as React from \"react\";\nimport { ChipTabsRoot, ChipTabsTrigger, ChipTabsList } from \"seed-design/ui/chip-tabs\";\n\nexport default function ChipTabsPreview() {\n  const [value, setValue] = React.useState(\"1\");\n  return (\n    <>\n      <ChipTabsRoot\n        variant=\"neutralSolid\"\n        defaultValue=\"1\"\n        value={value}\n        onValueChange={(value) => setValue(value)}\n      >\n        <ChipTabsList>\n          <ChipTabsTrigger value=\"1\">라벨1</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"2\">라벨2</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"3\">라벨3</ChipTabsTrigger>\n        </ChipTabsList>\n      </ChipTabsRoot>\n      {value === \"1\" && <div>content 1</div>}\n      {value === \"2\" && <div>content 2</div>}\n      {value === \"3\" && <div>content 3</div>}\n    </>\n  );\n}",
  "progress-circle-neutral": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircleNeutral() {\n  return <ProgressCircle tone=\"neutral\" />;\n}",
  "identity-placeholder-preview": "import { IdentityPlaceholder } from \"seed-design/ui/identity-placeholder\";\n\nexport default function IdentityPlaceholderPreview() {\n  return <IdentityPlaceholder />;\n}",
  "bottom-sheet-preview": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  BottomSheetRoot,\n  BottomSheetBody,\n  BottomSheetContent,\n  BottomSheetFooter,\n  BottomSheetTrigger,\n} from \"seed-design/ui/bottom-sheet\";\n\nconst BottomSheetPreview = () => {\n  return (\n    <BottomSheetRoot>\n      <BottomSheetTrigger asChild>\n        <ActionButton>Open</ActionButton>\n      </BottomSheetTrigger>\n      <BottomSheetContent title=\"제목\" description=\"설명을 작성할 수 있어요\">\n        {/* BottomSheetBody is simple paddingX helper. */}\n        {/* If you need to omit padding, replace with <Stack /> or other layout you need. */}\n        <BottomSheetBody minHeight=\"s16\">Content</BottomSheetBody>\n        <BottomSheetFooter>\n          <ActionButton variant=\"neutralSolid\">확인</ActionButton>\n        </BottomSheetFooter>\n      </BottomSheetContent>\n    </BottomSheetRoot>\n  );\n};\n\nexport default BottomSheetPreview;",
  "flex-preview": "import { Flex } from \"seed-design/ui/layout\";\n\nexport default function FlexPreview() {\n  return (\n    <Flex direction=\"row\" background=\"bg.layerDefault\" gap=\"s2\" width=\"full\" borderRadius=\"s2\">\n      <Flex\n        direction=\"column\"\n        background=\"bg.brandSolid\"\n        gap=\"s1_5\"\n        paddingX=\"s2\"\n        paddingY=\"s2\"\n        flexGrow={1}\n        borderRadius=\"s2\"\n      >\n        <Flex background=\"bg.neutralWeak\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s1\">\n          1\n        </Flex>\n        <Flex background=\"bg.neutralWeak\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s1\">\n          2\n        </Flex>\n      </Flex>\n      <Flex\n        direction=\"row\"\n        background=\"bg.brandSolid\"\n        gap=\"s1_5\"\n        paddingX=\"s2\"\n        paddingY=\"s2\"\n        flexGrow={1}\n        borderRadius=\"s2\"\n      >\n        <Flex background=\"bg.neutralWeak\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s1\">\n          3\n        </Flex>\n        <Flex background=\"bg.neutralWeak\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s1\">\n          4\n        </Flex>\n      </Flex>\n      <Flex background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        5\n      </Flex>\n    </Flex>\n  );\n}",
  "text-field-medium": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldMedium() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"medium\">\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "text-button-disabled": "import { IconPenHorizlineLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonPreview() {\n  return (\n    <TextButton disabled icon={<IconPenHorizlineLine />}>\n      새 글\n    </TextButton>\n  );\n}",
  "callout-critical": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutCritical() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        tone=\"critical\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        tone=\"critical\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        tone=\"critical\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "multiline-text-field-large": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldLarge() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"large\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "progress-circle-preview": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCirclePreview() {\n  return <ProgressCircle tone=\"neutral\" size=\"40\" />;\n}",
  "inline-banner-with-title-text": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerWithTitleText() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner title=\"타이틀\" description=\"사업자 정보를 등록해주세요.\" />\n      <ActionableInlineBanner title=\"타이틀\" description=\"사업자 정보를 등록해주세요.\" />\n      <DismissibleInlineBanner title=\"타이틀\" description=\"사업자 정보를 등록해주세요.\" />\n    </Stack>\n  );\n}",
  "check-select-box-react-hook-form": "import { Column, Columns, Stack } from \"@seed-design/react\";\nimport { useCallback, type FormEvent } from \"react\";\nimport { useController, useForm } from \"react-hook-form\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport { CheckSelectBox, CheckSelectBoxGroup } from \"seed-design/ui/select-box\";\n\nconst POSSIBLE_FRUIT_VALUES = [\"apple\", \"melon\", \"mango\"] as const;\n\ntype FormValues = Record<(typeof POSSIBLE_FRUIT_VALUES)[number], boolean>;\n\nexport default function CheckSelectBoxReactHookForm() {\n  const { handleSubmit, reset, setValue, control } = useForm<FormValues>({\n    defaultValues: {\n      apple: false,\n      melon: true,\n      mango: false,\n    },\n  });\n\n  const onValid = useCallback((data: FormValues) => {\n    window.alert(JSON.stringify(data, null, 2));\n  }, []);\n\n  const onReset = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      reset();\n    },\n    [reset],\n  );\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit(onValid)} onReset={onReset}>\n      <CheckSelectBoxGroup>\n        <Stack gap=\"spacingY.componentDefault\">\n          {POSSIBLE_FRUIT_VALUES.map((name) => {\n            const {\n              field: { value, ...restProps },\n              fieldState: { invalid },\n            } = useController({ name, control });\n\n            return (\n              <CheckSelectBox\n                key={name}\n                label={name}\n                checked={value}\n                inputProps={restProps}\n                invalid={invalid}\n              />\n            );\n          })}\n        </Stack>\n      </CheckSelectBoxGroup>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column width=\"content\">\n          <ActionButton type=\"button\" variant=\"neutralWeak\" onClick={() => setValue(\"mango\", true)}>\n            mango 선택\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "tabs-disabled": "import { TabsRoot, TabsContent, TabsTrigger, TabsList } from \"seed-design/ui/tabs\";\n\nexport default function TabsDisabled() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\" disabled>\n            라벨2\n          </TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "checkbox-react-hook-form": "import { useController, useForm } from \"react-hook-form\";\nimport { Checkbox } from \"seed-design/ui/checkbox\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport { Column, Columns, Stack } from \"seed-design/ui/layout\";\nimport { useCallback, type FormEvent } from \"react\";\n\nconst POSSIBLE_FRUIT_VALUES = [\"apple\", \"melon\", \"mango\"] as const;\n\ntype FormValues = Record<(typeof POSSIBLE_FRUIT_VALUES)[number], boolean>;\n\nexport default function CheckboxReactHookForm() {\n  const { handleSubmit, reset, setValue, control } = useForm<FormValues>({\n    defaultValues: {\n      apple: false,\n      melon: true,\n      mango: false,\n    },\n  });\n\n  const onValid = useCallback((data: FormValues) => {\n    window.alert(JSON.stringify(data, null, 2));\n  }, []);\n\n  const onReset = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      reset();\n    },\n    [reset],\n  );\n\n  return (\n    <Stack gap=\"s3\" as=\"form\" onSubmit={handleSubmit(onValid)} onReset={onReset}>\n      <Stack>\n        {POSSIBLE_FRUIT_VALUES.map((name) => {\n          const {\n            field: { value, ...restProps },\n            fieldState: { invalid },\n          } = useController({ name, control });\n          return (\n            <Checkbox\n              key={name}\n              label={name}\n              checked={value}\n              inputProps={restProps}\n              invalid={invalid}\n            />\n          );\n        })}\n      </Stack>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column width=\"content\">\n          <ActionButton type=\"button\" variant=\"neutralWeak\" onClick={() => setValue(\"mango\", true)}>\n            mango 선택\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "badge-as-child": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeAsChild() {\n  return (\n    <Badge asChild>\n      <a href=\"https://example.com\" target=\"_blank\" rel=\"noreferrer\">\n        링크\n      </a>\n    </Badge>\n  );\n}",
  "tabs-layout-fill": "import { TabsContent, TabsList, TabsRoot, TabsTrigger } from \"seed-design/ui/tabs\";\n\nexport default function TabsLayoutFill() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"2\" triggerLayout=\"fill\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "extended-fab-neutral-solid": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\n\nexport default function ExtendedFabNeutralSolid() {\n  return (\n    <ExtendedFab variant=\"neutralSolid\" prefixIcon={<IconBellFill />}>\n      알림 설정\n    </ExtendedFab>\n  );\n}",
  "callout-with-title-text": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutWithTitleText() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        title=\"타이틀\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        title=\"타이틀\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        title=\"타이틀\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "checkbox-stronger": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxStronger() {\n  return <Checkbox label=\"Bold Label Text\" weight=\"stronger\" />;\n}",
  "action-button-neutral-outline": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonNeutralOutline() {\n  return <ActionButton variant=\"neutralOutline\">라벨</ActionButton>;\n}",
  "switch-medium": "import { useState } from \"react\";\nimport { Switch } from \"seed-design/ui/switch\";\n\nexport default function SwitchMedium() {\n  const [isChecked, setIsChecked] = useState(false);\n\n  return <Switch size=\"medium\" checked={isChecked} onCheckedChange={setIsChecked} />;\n}",
  "multiline-text-field-preview": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldPreview() {\n  return (\n    <TextField>\n      <TextFieldTextarea autoFocus />\n    </TextField>\n  );\n}",
  "badge-positive": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgePositive() {\n  return <Badge tone=\"positive\">라벨</Badge>;\n}",
  "action-chip-small": "import { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipSmall() {\n  return <ActionChip size=\"small\">라벨</ActionChip>;\n}",
  "toggle-button-preview": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonPreview() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton pressed={pressed} onPressedChange={setPressed}>\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "inline-banner-warning-weak": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerWarningWeak() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"warningWeak\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"warningWeak\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        variant=\"warningWeak\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "alert-dialog-neutral": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"seed-design/ui/alert-dialog\";\nimport { Column, Columns } from \"@seed-design/react\";\n\nconst AlertDialogNeutral = () => {\n  return (\n    // You can set z-index dialog with \"--layer-index\" custom property. useful for stackflow integration.\n    <AlertDialogRoot>\n      <AlertDialogTrigger asChild>\n        <ActionButton>열기</ActionButton>\n      </AlertDialogTrigger>\n      <AlertDialogContent layerIndex={50}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>제목</AlertDialogTitle>\n          <AlertDialogDescription>중립적인 선택지를 제공합니다.</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <Columns gap=\"s2\">\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"neutralSolid\">취소</ActionButton>\n              </AlertDialogAction>\n            </Column>\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"neutralWeak\">확인</ActionButton>\n              </AlertDialogAction>\n            </Column>\n          </Columns>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  );\n};\n\nexport default AlertDialogNeutral;",
  "text-field-slicing": "import { useState } from \"react\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldSlicing() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <TextField\n      label=\"라벨\"\n      description=\"6글자까지 입력 가능합니다\"\n      maxGraphemeCount={6}\n      value={value}\n      onValueChange={({ slicedValue }) => setValue(slicedValue)}\n    >\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "action-button-critical-solid": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonCriticalSolid() {\n  return <ActionButton variant=\"criticalSolid\">라벨</ActionButton>;\n}",
  "inline-banner-critical-solid": "import { ActionableInlineBanner, InlineBanner } from \"seed-design/ui/inline-banner\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerCriticalSolid() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"criticalSolid\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"criticalSolid\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "inline-banner-with-link-label": "import { InlineBanner } from \"seed-design/ui/inline-banner\";\n\nexport default function InlineBannerWithLinkLabel() {\n  return (\n    <InlineBanner\n      description=\"사업자 정보를 등록해주세요.\"\n      linkProps={{ children: \"자세히 보기\" }}\n    />\n  );\n}",
  "inline-banner-positive-weak": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconCheckmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerPositiveWeak() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"positiveWeak\"\n        icon={<IconCheckmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"positiveWeak\"\n        icon={<IconCheckmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        variant=\"positiveWeak\"\n        icon={<IconCheckmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "multiline-text-field-react-hook-form": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { useController, useForm } from \"react-hook-form\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\nimport { Column, Columns, Stack } from \"seed-design/ui/layout\";\nimport { useCallback, type FormEvent, type KeyboardEvent } from \"react\";\n\ninterface FormValues {\n  bio: string;\n  address: string;\n}\n\nexport default function MultilineTextFieldReactHookForm() {\n  const { handleSubmit, reset, control } = useForm<FormValues>({\n    defaultValues: {\n      bio: \"\",\n      address: \"\",\n    },\n    shouldFocusError: true,\n  });\n\n  const { field: bioField, fieldState: bioFieldState } = useController({\n    name: \"bio\",\n    control,\n    rules: {\n      required: \"필수 입력 항목입니다\",\n    },\n  });\n  const {\n    field: { onChange: addressOnChange, ...addressField },\n    fieldState: addressFieldState,\n  } = useController({\n    name: \"address\",\n    control,\n    rules: {\n      required: \"필수 입력 항목입니다\",\n      pattern: { value: /^대한민국/, message: \"대한민국으로 시작해주세요\" },\n    },\n  });\n\n  const onValid = useCallback((data: FormValues) => {\n    window.alert(JSON.stringify(data, null, 2));\n  }, []);\n\n  const onReset = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n      reset();\n    },\n    [reset],\n  );\n\n  const onMetaReturn = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Enter\" && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        handleSubmit(onValid)();\n      }\n    },\n    [handleSubmit, onValid],\n  );\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit(onValid)} onReset={onReset}>\n      <Columns gap=\"s2\">\n        <Column>\n          <TextField\n            label=\"자기소개\"\n            indicator=\"(필수)\"\n            description=\"자기소개를 써주세요\"\n            invalid={bioFieldState.invalid}\n            errorMessage={bioFieldState.error?.message}\n            required\n            {...bioField}\n          >\n            <TextFieldTextarea placeholder=\"저는…\" onKeyDown={onMetaReturn} />\n          </TextField>\n        </Column>\n        <Column>\n          <TextField\n            label=\"주소\"\n            indicator=\"(필수)\"\n            description=\"주소를 써주세요\"\n            invalid={addressFieldState.invalid}\n            errorMessage={addressFieldState.error?.message}\n            maxGraphemeCount={30}\n            onValueChange={({ slicedValue }) => addressOnChange(slicedValue)}\n            required\n            {...addressField}\n          >\n            <TextFieldTextarea placeholder=\"대한민국\" onKeyDown={onMetaReturn} />\n          </TextField>\n        </Column>\n      </Columns>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "callout-warning": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutWarning() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        tone=\"warning\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        tone=\"warning\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        tone=\"warning\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "radio-select-box-preview": "import { Stack } from \"@seed-design/react\";\nimport { RadioSelectBoxItem, RadioSelectBoxRoot } from \"seed-design/ui/select-box\";\n\nexport default function RadioSelectBoxPreview() {\n  return (\n    <RadioSelectBoxRoot defaultValue=\"apple\" aria-label=\"Fruit\">\n      <Stack gap=\"spacingY.componentDefault\">\n        <RadioSelectBoxItem value=\"apple\" label=\"Apple\" />\n        <RadioSelectBoxItem\n          value=\"melon\"\n          label=\"Melon\"\n          description=\"Elit cupidatat dolore fugiat enim veniam culpa.\"\n        />\n        <RadioSelectBoxItem value=\"mango\" label=\"Mango\" />\n      </Stack>\n    </RadioSelectBoxRoot>\n  );\n}",
  "badge-critical": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeCritical() {\n  return <Badge tone=\"critical\">라벨</Badge>;\n}",
  "alert-dialog-preview": "import { Column, Columns } from \"@seed-design/react\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"seed-design/ui/alert-dialog\";\n\nconst AlertDialogSingle = () => {\n  return (\n    // You can set z-index dialog with \"--layer-index\" custom property. useful for stackflow integration.\n    <AlertDialogRoot>\n      <AlertDialogTrigger asChild>\n        <ActionButton>열기</ActionButton>\n      </AlertDialogTrigger>\n      <AlertDialogContent layerIndex={50}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>주의</AlertDialogTitle>\n          <AlertDialogDescription>이 작업은 되돌릴 수 없습니다.</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <Columns gap=\"s2\">\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"neutralSolid\">취소</ActionButton>\n              </AlertDialogAction>\n            </Column>\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"neutralWeak\">확인</ActionButton>\n              </AlertDialogAction>\n            </Column>\n          </Columns>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  );\n};\n\nexport default AlertDialogSingle;",
  "toggle-button-xsmall": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonXsmall() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton size=\"xsmall\" pressed={pressed} onPressedChange={setPressed}>\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "text-button-icon-last": "import { IconChevronRightLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonIconLast() {\n  return (\n    <TextButton layout=\"iconLast\" icon={<IconChevronRightLine />}>\n      추가\n    </TextButton>\n  );\n}",
  "multiline-text-field-required": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldRequired() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" required indicator=\"(필수)\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "inline-banner-warning-solid": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerWarningSolid() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"warningSolid\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"warningSolid\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        variant=\"warningSolid\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "multiline-text-field-enabled": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\nimport { Column, Columns } from \"seed-design/ui/layout\";\n\nexport default function MultilineTextFieldEnabled() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\">\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "callout-preview": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutPreview() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout description=\"Aute nulla proident tempor minim eiusmod. In nostrud officia irure laborum.\" />\n      <ActionableCallout description=\"Aute nulla proident tempor minim eiusmod. In nostrud officia irure laborum.\" />\n      <DismissibleCallout description=\"Aute nulla proident tempor minim eiusmod. In nostrud officia irure laborum.\" />\n    </Stack>\n  );\n}",
  "badge-neutral": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeNeutral() {\n  return <Badge tone=\"neutral\">라벨</Badge>;\n}",
  "callout-with-all": "import { IconCalendarFill } from \"@daangn/react-monochrome-icon\";\nimport { Callout } from \"seed-design/ui/callout\";\n\nexport default function CalloutWithAll() {\n  return (\n    <Callout\n      title=\"타이틀\"\n      icon={<IconCalendarFill />}\n      description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      linkProps={{ children: \"시도해 보기\" }}\n    />\n  );\n}",
  "text-field-grapheme-count": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldGraphemeCount() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" maxGraphemeCount={8}>\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "avatar-badge": "import { IdentityPlaceholder } from \"seed-design/ui/identity-placeholder\";\nimport { Avatar, AvatarBadge } from \"seed-design/ui/avatar\";\n\nexport default function AvatarWithBadge() {\n  return (\n    <Avatar\n      size=\"80\"\n      src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n      fallback={<IdentityPlaceholder />}\n    >\n      <AvatarBadge>\n        <div style={{ background: \"green\", width: 20, height: 20, borderRadius: 9999 }} />\n      </AvatarBadge>\n    </Avatar>\n  );\n}",
  "help-bubble-title-only": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { HelpBubbleTrigger } from \"seed-design/ui/help-bubble\";\n\nexport default function HelpBubbleTitleOnly() {\n  return (\n    <HelpBubbleTrigger open title=\"Title Only\">\n      <ActionButton>열기</ActionButton>\n    </HelpBubbleTrigger>\n  );\n}",
  "callout-neutral": "import { Stack } from \"seed-design/ui/layout\";\nimport { ActionableCallout, Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutNeutral() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        tone=\"neutral\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <ActionableCallout\n        tone=\"neutral\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n      <DismissibleCallout\n        tone=\"neutral\"\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n      />\n    </Stack>\n  );\n}",
  "badge-preview": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgePreview() {\n  return <Badge>라벨</Badge>;\n}",
  "columns-preview": "import { Column, Columns } from \"seed-design/ui/layout\";\n\nexport default function ColumnsPreview() {\n  return (\n    <Columns background=\"bg.layerDefault\" gap=\"s2\" width=\"full\" borderRadius=\"s2\">\n      <Column background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        1\n      </Column>\n      <Column\n        background=\"bg.brandSolid\"\n        paddingX=\"s4\"\n        paddingY=\"s3\"\n        width=\"content\"\n        borderRadius=\"s2\"\n      >\n        Content Width\n      </Column>\n      <Column background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        2\n      </Column>\n    </Columns>\n  );\n}",
  "callout-with-link-label": "import { Stack } from \"seed-design/ui/layout\";\nimport { Callout, DismissibleCallout } from \"seed-design/ui/callout\";\n\nexport default function CalloutWithLinkLabel() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <Callout\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n        linkProps={{ children: \"시도해 보기\" }}\n      />\n      <DismissibleCallout\n        description=\"기능에 대한 안내 또는 유익한 내용을 전달해요. 콜아웃은 꼭 필요한 경우에만 절제하여 사용해요.\"\n        linkProps={{ children: \"시도해 보기\" }}\n      />\n    </Stack>\n  );\n}",
  "tabs-standalone": "import { useState } from \"react\";\nimport { TabsRoot, TabsList, TabsTrigger } from \"seed-design/ui/tabs\";\n\nexport default function TabsStandalone() {\n  const [activeTab, setActiveTab] = useState(\"1\");\n\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\" onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        {activeTab === \"1\" && (\n          <div>\n            <Content>Content 1</Content>\n          </div>\n        )}\n        {activeTab === \"2\" && (\n          <div>\n            <Content>Content 2</Content>\n          </div>\n        )}\n        {activeTab === \"3\" && (\n          <div>\n            <Content>Content 3</Content>\n          </div>\n        )}\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "inline-banner-neutral-weak": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerNeutralWeak() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"neutralWeak\"\n        icon={<IconBellFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"neutralWeak\"\n        icon={<IconBellFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <DismissibleInlineBanner\n        variant=\"neutralWeak\"\n        icon={<IconBellFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "reaction-button-loading": "import { IconFaceSmileCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { useState } from \"react\";\nimport { ReactionButton } from \"seed-design/ui/reaction-button\";\n\nexport default function ReactionButtonLoading() {\n  const [pressed, setPressed] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  function handleToggle() {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setPressed((prev) => !prev);\n    }, 2000);\n  }\n\n  // 이벤트 핸들링이 필요할 수 있으므로 loading은 disabled를 포함하지 않습니다. 이벤트 발생을 원하지 않는 경우, disabled 속성을 추가해주세요.\n  return (\n    <ReactionButton\n      prefixIcon={<IconFaceSmileCircleFill />}\n      loading={loading}\n      pressed={pressed}\n      onPressedChange={handleToggle}\n    >\n      시간이 걸리는 토글\n    </ReactionButton>\n  );\n}",
  "snackbar-positive": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { Snackbar, SnackbarProvider, useSnackbarAdapter } from \"seed-design/ui/snackbar\";\n\nfunction Component() {\n  const adapter = useSnackbarAdapter();\n\n  return (\n    <ActionButton\n      onClick={() =>\n        adapter.create({\n          timeout: 5000,\n          onClose: () => {},\n          render: () => (\n            <Snackbar\n              variant=\"positive\"\n              message=\"알림 메세지\"\n              actionLabel=\"확인\"\n              onAction={() => {}}\n            />\n          ),\n        })\n      }\n    >\n      실행\n    </ActionButton>\n  );\n}\n\nexport default function SnackbarPositive() {\n  return (\n    <SnackbarProvider>\n      <Component />\n    </SnackbarProvider>\n  );\n}",
  "text-field-disabled": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { Column, Columns } from \"seed-design/ui/layout\";\n\nexport default function TextFieldDisabled() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" disabled>\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          disabled\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "badge-solid": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeSolid() {\n  return <Badge variant=\"solid\">라벨</Badge>;\n}",
  "badge-pill": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeRectangle() {\n  return <Badge shape=\"pill\">라벨</Badge>;\n}",
  "tabs-preview": "import { TabsRoot, TabsContent, TabsTrigger, TabsList } from \"seed-design/ui/tabs\";\n\nexport default function TabsPreview() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "reaction-button-disabled": "import { IconFaceSmileCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { ReactionButton } from \"seed-design/ui/reaction-button\";\n\nexport default function ReactionButtonDisabled() {\n  return (\n    <ReactionButton prefixIcon={<IconFaceSmileCircleFill />} disabled>\n      비활성\n    </ReactionButton>\n  );\n}",
  "tabs-scroll-top": "import { RefObject, useRef, useState } from \"react\";\nimport { TabsCarousel, TabsContent, TabsList, TabsRoot, TabsTrigger } from \"seed-design/ui/tabs\";\n\nexport default function TabsScrollTop() {\n  const [currentTab, setCurrentTab] = useState(\"1\");\n  const contentRefs: Record<string, RefObject<HTMLDivElement>> = {\n    \"1\": useRef(null),\n    \"2\": useRef(null),\n  };\n\n  const handleTriggerClick = (value: string) => {\n    if (value === currentTab) {\n      contentRefs[value].current?.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot triggerLayout=\"fill\" value={currentTab} onValueChange={setCurrentTab}>\n        <TabsList>\n          <TabsTrigger onClick={() => handleTriggerClick(\"1\")} value=\"1\">\n            라벨1\n          </TabsTrigger>\n          <TabsTrigger onClick={() => handleTriggerClick(\"2\")} value=\"2\">\n            라벨2\n          </TabsTrigger>\n        </TabsList>\n        <TabsCarousel swipeable>\n          <TabsContent ref={contentRefs[\"1\"]} value=\"1\" style={{ maxHeight: \"200px\" }}>\n            <Content height=\"1000px\">Content 1</Content>\n          </TabsContent>\n          <TabsContent ref={contentRefs[\"2\"]} value=\"2\" style={{ maxHeight: \"200px\" }}>\n            <Content height=\"1000px\">Content 2</Content>\n          </TabsContent>\n        </TabsCarousel>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren<{ height: string }>) => {\n  const { height, children } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        height,\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};",
  "tabs-layout-hug": "import { TabsRoot, TabsContent, TabsTrigger, TabsList } from \"seed-design/ui/tabs\";\n\nexport default function TabsLayoutHug() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\" triggerLayout=\"hug\">\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content>Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content>Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content>Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"300px\",\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};",
  "text-preview": "import { Flex } from \"seed-design/ui/layout\";\nimport { Text } from \"seed-design/ui/text\";\n\nexport default function TextPreview() {\n  return (\n    <Flex direction=\"column\" gap=\"s2\">\n      <Text color=\"fg.neutral\" textStyle=\"labelSmallDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"labelMediumDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"labelLargeDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"bodySmallDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"bodyMediumDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"titleSmallDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"titleMediumDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"titleLargeDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"headingSmallDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"headingMediumDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n      <Text color=\"fg.neutral\" textStyle=\"headingLargeDefault\">\n        다람쥐 헌 쳇바퀴에 타고파\n      </Text>\n    </Flex>\n  );\n}",
  "text-field-indicator": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldIndicator() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" indicator=\"(선택)\">\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "check-select-box-preview": "import { Stack } from \"@seed-design/react\";\nimport { CheckSelectBox, CheckSelectBoxGroup } from \"seed-design/ui/select-box\";\n\nexport default function CheckSelectBoxPreview() {\n  return (\n    <CheckSelectBoxGroup>\n      <Stack gap=\"spacingY.componentDefault\">\n        <CheckSelectBox label=\"Apple\" defaultChecked />\n        <CheckSelectBox\n          label=\"Melon\"\n          description=\"Elit cupidatat dolore fugiat enim veniam culpa.\"\n        />\n        <CheckSelectBox label=\"Mango\" />\n      </Stack>\n    </CheckSelectBoxGroup>\n  );\n}",
  "tabs-sticky-list": "import { TabsContent, TabsList, TabsRoot, TabsTrigger } from \"seed-design/ui/tabs\";\n\nexport default function TabsStickyList() {\n  return (\n    // 600은 화면 높이라고 가정합니다.\n    <div style={{ width: \"360px\", height: \"600px\" }}>\n      <TabsRoot\n        defaultValue=\"1\"\n        size=\"medium\"\n        stickyList\n        style={{ height: \"100%\" }} // 탭 영역을 전체 화면으로 설정합니다.\n      >\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"1\">\n          <Content height=\"1000px\">Content 1</Content>\n        </TabsContent>\n        <TabsContent value=\"2\">\n          <Content height=\"1000px\">Content 2</Content>\n        </TabsContent>\n        <TabsContent value=\"3\">\n          <Content height=\"1000px\">Content 3</Content>\n        </TabsContent>\n      </TabsRoot>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren<{ height: string }>) => {\n  const { height, children } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height,\n        background: \"linear-gradient(to bottom, white, gray)\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};",
  "snackbar-critical": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { Snackbar, SnackbarProvider, useSnackbarAdapter } from \"seed-design/ui/snackbar\";\n\nfunction Component() {\n  const adapter = useSnackbarAdapter();\n\n  return (\n    <ActionButton\n      onClick={() =>\n        adapter.create({\n          timeout: 50000000,\n          onClose: () => {},\n          render: () => (\n            <Snackbar\n              variant=\"critical\"\n              message=\"알림 메세지\"\n              actionLabel=\"확인\"\n              onAction={() => {}}\n            />\n          ),\n        })\n      }\n    >\n      실행\n    </ActionButton>\n  );\n}\n\nexport default function SnackbarNegative() {\n  return (\n    <SnackbarProvider>\n      <Component />\n    </SnackbarProvider>\n  );\n}",
  "inline-banner-critical-weak": "import { ActionableInlineBanner, InlineBanner } from \"seed-design/ui/inline-banner\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerCriticalWeak() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner\n        variant=\"criticalWeak\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n      <ActionableInlineBanner\n        variant=\"criticalWeak\"\n        icon={<IconExclamationmarkCircleFill />}\n        description=\"사업자 정보를 등록해주세요.\"\n      />\n    </Stack>\n  );\n}",
  "control-chip-suffix-icon": "import { IconChevronDownFill } from \"@daangn/react-monochrome-icon\";\nimport { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ControlChipSuffixIcon() {\n  return <ControlChip.Toggle suffixIcon={<IconChevronDownFill />}>라벨</ControlChip.Toggle>;\n}",
  "control-chip-icon-only": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ControlChipIconOnly() {\n  return (\n    <ControlChip.Toggle layout=\"iconOnly\">\n      <IconPlusFill />\n    </ControlChip.Toggle>\n  );\n}",
  "chip-tabs-variant-neutral-solid": "import * as React from \"react\";\nimport { ChipTabsRoot, ChipTabsTrigger, ChipTabsList } from \"seed-design/ui/chip-tabs\";\n\nexport default function ChipTabsVariantNeutralSolid() {\n  const [value, setValue] = React.useState(\"1\");\n  return (\n    <>\n      <ChipTabsRoot\n        variant=\"neutralSolid\"\n        defaultValue=\"1\"\n        value={value}\n        onValueChange={(value) => setValue(value)}\n      >\n        <ChipTabsList>\n          <ChipTabsTrigger value=\"1\">라벨1</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"2\">라벨2</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"3\">라벨3</ChipTabsTrigger>\n        </ChipTabsList>\n      </ChipTabsRoot>\n      {value === \"1\" && <div>content 1</div>}\n      {value === \"2\" && <div>content 2</div>}\n      {value === \"3\" && <div>content 3</div>}\n    </>\n  );\n}",
  "segmented-control-fixed-width": "import { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\n\nexport default function SegmentedControlFixedWidth() {\n  return (\n    <SegmentedControl defaultValue=\"new\" style={{ width: \"600px\" }} aria-label=\"Sort by\">\n      <SegmentedControlItem value=\"new\">New</SegmentedControlItem>\n      <SegmentedControlItem value=\"hot\">Hot</SegmentedControlItem>\n    </SegmentedControl>\n  );\n}",
  "extended-fab-small": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\n\nexport default function ExtendedFabSmall() {\n  return (\n    <ExtendedFab size=\"small\" prefixIcon={<IconBellFill />}>\n      알림 설정\n    </ExtendedFab>\n  );\n}",
  "segmented-control-long-label": "import { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\n\nexport default function SegmentedControlLongLabel() {\n  return (\n    <SegmentedControl defaultValue=\"price\" aria-label=\"정렬 기준\">\n      <SegmentedControlItem value=\"price\">가격 높은 순</SegmentedControlItem>\n      <SegmentedControlItem value=\"discount\">할인율 높은 순</SegmentedControlItem>\n      <SegmentedControlItem value=\"popularity\">인기 많은 순</SegmentedControlItem>\n    </SegmentedControl>\n  );\n}",
  "action-chip-icon-only": "import { IconPlusFill } from \"@daangn/react-monochrome-icon\";\nimport { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipIconOnly() {\n  return (\n    <ActionChip layout=\"iconOnly\">\n      <IconPlusFill />\n    </ActionChip>\n  );\n}",
  "control-chip-medium": "import { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ActionChipMedium() {\n  return <ControlChip.Toggle size=\"medium\">라벨</ControlChip.Toggle>;\n}",
  "extended-action-sheet-preview": "import { IconEyeSlashLine } from \"@daangn/react-monochrome-icon\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  ExtendedActionSheetContent,\n  ExtendedActionSheetGroup,\n  ExtendedActionSheetItem,\n  ExtendedActionSheetRoot,\n  ExtendedActionSheetTrigger,\n} from \"seed-design/ui/extended-action-sheet\";\n\nconst ExtendedActionSheetPreview = () => {\n  return (\n    <ExtendedActionSheetRoot>\n      <ExtendedActionSheetTrigger asChild>\n        <ActionButton>Open</ActionButton>\n      </ExtendedActionSheetTrigger>\n      <ExtendedActionSheetContent aria-label=\"Extended Action Sheet\">\n        <ExtendedActionSheetGroup>\n          <ExtendedActionSheetItem prefixIcon={<IconEyeSlashLine />} label=\"Action 1\" />\n          <ExtendedActionSheetItem prefixIcon={<IconEyeSlashLine />} label=\"Action 2\" />\n          <ExtendedActionSheetItem prefixIcon={<IconEyeSlashLine />} label=\"Action 3\" />\n        </ExtendedActionSheetGroup>\n        <ExtendedActionSheetGroup>\n          <ExtendedActionSheetItem prefixIcon={<IconEyeSlashLine />} label=\"Action 4\" />\n          <ExtendedActionSheetItem\n            tone=\"critical\"\n            prefixIcon={<IconEyeSlashLine />}\n            label=\"Action 5\"\n          />\n        </ExtendedActionSheetGroup>\n      </ExtendedActionSheetContent>\n    </ExtendedActionSheetRoot>\n  );\n};\n\nexport default ExtendedActionSheetPreview;",
  "segmented-control-preview": "import { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\n\nexport default function SegmentedControlPreview() {\n  return (\n    <SegmentedControl defaultValue=\"Hot\" aria-label=\"Sort by\">\n      <SegmentedControlItem value=\"Hot\">Hot</SegmentedControlItem>\n      <SegmentedControlItem value=\"New\">New</SegmentedControlItem>\n    </SegmentedControl>\n  );\n}",
  "chip-tabs-variant-brand-solid": "import * as React from \"react\";\nimport { ChipTabsRoot, ChipTabsTrigger, ChipTabsList } from \"seed-design/ui/chip-tabs\";\n\nexport default function ChipTabsVariantBrandSolid() {\n  const [value, setValue] = React.useState(\"1\");\n  return (\n    <>\n      <ChipTabsRoot\n        variant=\"brandSolid\"\n        defaultValue=\"1\"\n        value={value}\n        onValueChange={(value) => setValue(value)}\n      >\n        <ChipTabsList>\n          <ChipTabsTrigger value=\"1\">라벨1</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"2\">라벨2</ChipTabsTrigger>\n          <ChipTabsTrigger value=\"3\">라벨3</ChipTabsTrigger>\n        </ChipTabsList>\n      </ChipTabsRoot>\n      {value === \"1\" && <div>content 1</div>}\n      {value === \"2\" && <div>content 2</div>}\n      {value === \"3\" && <div>content 3</div>}\n    </>\n  );\n}",
  "switch-small": "import { useState } from \"react\";\nimport { Switch } from \"seed-design/ui/switch\";\n\nexport default function SwitchSmall() {\n  const [isChecked, setIsChecked] = useState(false);\n\n  return <Switch size=\"small\" label=\"라벨\" checked={isChecked} onCheckedChange={setIsChecked} />;\n}",
  "action-chip-medium": "import { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipMedium() {\n  return <ActionChip size=\"medium\">라벨</ActionChip>;\n}",
  "multiline-text-field-form": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\nimport { Column, Columns, Inline, Stack } from \"seed-design/ui/layout\";\nimport { useState, useCallback, type FormEvent } from \"react\";\n\ninterface FormValues {\n  bio: string;\n  address: string;\n}\n\ntype FieldErrors = Record<keyof FormValues, string | null>;\n\nexport default function MultilineTextFieldForm() {\n  const [formValues, setFormValues] = useState<FormValues>({\n    bio: \"\",\n    address: \"\",\n  });\n\n  const [fieldErrors, setFieldStates] = useState<FieldErrors>({\n    bio: null,\n    address: null,\n  });\n\n  const validateForm = useCallback((): boolean => {\n    let isValid = true;\n\n    const newFieldErrors: FieldErrors = {\n      bio: null,\n      address: null,\n    };\n\n    // Name validation\n    if (!formValues.bio) {\n      newFieldErrors.bio = \"필수 입력 항목입니다\";\n      isValid = false;\n    }\n\n    if (!formValues.address.startsWith(\"대한민국\")) {\n      newFieldErrors.address = \"대한민국으로 시작해주세요\";\n      isValid = false;\n    }\n\n    if (!formValues.address) {\n      newFieldErrors.address = \"필수 입력 항목입니다\";\n      isValid = false;\n    }\n\n    setFieldStates(newFieldErrors);\n\n    return isValid;\n  }, [formValues]);\n\n  const handleSubmit = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n\n      if (validateForm()) {\n        window.alert(JSON.stringify(formValues, null, 2));\n      }\n    },\n    [formValues, validateForm],\n  );\n\n  const handleReset = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    setFormValues({ bio: \"\", address: \"\" });\n    setFieldStates({ bio: null, address: null });\n  }, []);\n\n  const handleNameChange = (value: string) => {\n    setFormValues((prev) => ({ ...prev, bio: value }));\n    setFieldStates((prev) => ({ ...prev, name: null }));\n  };\n\n  const handleAddressChange = (value: string) => {\n    setFormValues((prev) => ({ ...prev, address: value }));\n    setFieldStates((prev) => ({ ...prev, address: null }));\n  };\n\n  return (\n    <Stack gap=\"s3\" width=\"full\" as=\"form\" onSubmit={handleSubmit} onReset={handleReset}>\n      <Columns gap=\"s2\">\n        <Column>\n          <TextField\n            label=\"자기소개\"\n            indicator=\"(필수)\"\n            description=\"자기소개를 써주세요\"\n            required\n            value={formValues.bio}\n            onValueChange={({ value }) => handleNameChange(value)}\n            {...(fieldErrors.bio && { invalid: true, errorMessage: fieldErrors.bio })}\n          >\n            <TextFieldTextarea placeholder=\"저는…\" />\n          </TextField>\n        </Column>\n        <Column>\n          <TextField\n            label=\"주소\"\n            indicator=\"(필수)\"\n            description=\"주소를 써주세요\"\n            maxGraphemeCount={30}\n            required\n            value={formValues.address}\n            onValueChange={({ slicedValue }) => handleAddressChange(slicedValue)}\n            {...(fieldErrors.address && { invalid: true, errorMessage: fieldErrors.address })}\n          >\n            <TextFieldTextarea placeholder=\"대한민국\" />\n          </TextField>\n        </Column>\n      </Columns>\n      <Columns gap=\"s2\">\n        <Column width=\"content\">\n          <ActionButton type=\"reset\" variant=\"neutralWeak\">\n            초기화\n          </ActionButton>\n        </Column>\n        <Column>\n          <ActionButton type=\"submit\">제출</ActionButton>\n        </Column>\n      </Columns>\n    </Stack>\n  );\n}",
  "multiline-text-field-optional": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldOptional() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" indicator=\"(선택)\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "checkbox-disabled": "import { Checkbox } from \"seed-design/ui/checkbox\";\n\nexport default function CheckboxDisabled() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n      <Checkbox defaultChecked label=\"Disabled Checked, Square\" disabled />\n      <Checkbox checked={false} label=\"Disabled without Checked, Square\" disabled />\n      <Checkbox variant=\"ghost\" defaultChecked label=\"Disabled Checked, Ghost\" disabled />\n      <Checkbox variant=\"ghost\" checked={false} label=\"Disabled without Checked, Ghost\" disabled />\n    </div>\n  );\n}",
  "multiline-text-field-fixed-height": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\n\nexport default function MultilineTextFieldSpecifiedHeight() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\">\n      <TextFieldTextarea placeholder=\"플레이스홀더\" style={{ height: \"250px\" }} />\n    </TextField>\n  );\n}",
  "multiline-text-field-disabled": "import { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\nimport { Column, Columns } from \"seed-design/ui/layout\";\n\nexport default function MultilineTextFieldDisabled() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" disabled>\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          disabled\n          invalid\n          errorMessage=\"오류가 발생한 이유를 써주세요\"\n        >\n          <TextFieldTextarea placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "tabs-dynamic-height": "import { TabsRoot, TabsContent, TabsTrigger, TabsList, TabsCarousel } from \"seed-design/ui/tabs\";\n\nexport default function TabsDynamicHeight() {\n  return (\n    <div style={{ width: \"360px\" }}>\n      <TabsRoot defaultValue=\"1\" lazyMount unmountOnExit>\n        <TabsList>\n          <TabsTrigger value=\"1\">라벨1</TabsTrigger>\n          <TabsTrigger value=\"2\">라벨2</TabsTrigger>\n          <TabsTrigger value=\"3\">라벨3</TabsTrigger>\n        </TabsList>\n        <TabsCarousel autoHeight>\n          <TabsContent value=\"1\">\n            <Content height=\"100px\">Content 1</Content>\n          </TabsContent>\n          <TabsContent value=\"2\">\n            <Content height=\"200px\">Content 2</Content>\n          </TabsContent>\n          <TabsContent value=\"3\">\n            <Content height=\"300px\">Content 3</Content>\n          </TabsContent>\n        </TabsCarousel>\n      </TabsRoot>\n      <div style={{ height: \"100px\", backgroundColor: \"gray\" }}>아래 컨텐츠</div>\n    </div>\n  );\n}\n\nconst Content = (props: React.PropsWithChildren<{ height: string }>) => {\n  const { height, children } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height,\n        backgroundColor: \"var(--seed-color-bg-layer-default)\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};",
  "progress-circle-determinate": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircleDeterminate() {\n  return <ProgressCircle minValue={0} maxValue={100} value={40} />;\n}",
  "text-button-preview": "import { IconPenHorizlineLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonPreview() {\n  return <TextButton icon={<IconPenHorizlineLine />}>새 글</TextButton>;\n}",
  "extended-fab-preview": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\n\nexport default function ExtendedFabPreview() {\n  return <ExtendedFab prefixIcon={<IconBellFill />}>알림 설정</ExtendedFab>;\n}",
  "text-field-large": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldLarge() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"large\">\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "text-field-xlarge": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldXlarge() {\n  return (\n    <TextField label=\"라벨\" description=\"설명을 써주세요\" size=\"xlarge\">\n      <TextFieldInput placeholder=\"플레이스홀더\" />\n    </TextField>\n  );\n}",
  "progress-circle-static-white": "import { ProgressCircle } from \"seed-design/ui/progress-circle\";\n\nexport default function ProgressCircleStaticWhite() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flex: 1,\n        width: \"100%\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#000\",\n      }}\n    >\n      <ProgressCircle tone=\"staticWhite\" />\n    </div>\n  );\n}",
  "skeleton-preview": "import { Flex } from \"seed-design/ui/layout\";\nimport { Skeleton } from \"seed-design/ui/skeleton\";\n\nexport default function SkeletonPreview() {\n  return (\n    <Flex gap=\"s4\" alignItems=\"center\">\n      <Skeleton radius=\"full\" width=\"s12\" height=\"s12\" />\n      <Flex flexDirection=\"column\" gap=\"s2\">\n        <Skeleton radius=\"8\" height=\"s4\" width=\"250px\" />\n        <Skeleton radius=\"8\" height=\"s4\" width=\"250px\" />\n      </Flex>\n    </Flex>\n  );\n}",
  "badge-medium": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeMedium() {\n  return <Badge size=\"medium\">라벨</Badge>;\n}",
  "badge-rectangle": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeRectangle() {\n  return <Badge shape=\"rectangle\">라벨</Badge>;\n}",
  "text-button-critical": "import { IconTrashcanLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonCritical() {\n  return (\n    <TextButton tone=\"critical\" icon={<IconTrashcanLine />}>\n      삭제\n    </TextButton>\n  );\n}",
  "text-field-both-affixes": "import { IconPlusCircleLine, IconWonLine } from \"@daangn/react-monochrome-icon\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { Columns, Column } from \"seed-design/ui/layout\";\n\nexport default function TextFieldSuffix() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" prefix=\"만\" suffix=\"세\">\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          prefixIcon={<IconPlusCircleLine />}\n          suffixIcon={<IconWonLine />}\n        >\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "action-sheet-preview": "import {\n  ActionSheetContent,\n  ActionSheetItem,\n  ActionSheetRoot,\n  ActionSheetTrigger,\n} from \"seed-design/ui/action-sheet\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\n\nconst ActionSheetPreview = () => {\n  return (\n    <ActionSheetRoot>\n      <ActionSheetTrigger asChild>\n        <ActionButton>Open</ActionButton>\n      </ActionSheetTrigger>\n      <ActionSheetContent aria-label=\"Action Sheet\">\n        <ActionSheetItem label=\"Action 1\" />\n        <ActionSheetItem label=\"Action 2\" />\n        <ActionSheetItem tone=\"critical\" label=\"Action 3\" />\n      </ActionSheetContent>\n    </ActionSheetRoot>\n  );\n};\n\nexport default ActionSheetPreview;",
  "inline-banner-text-only": "import { Stack } from \"seed-design/ui/layout\";\nimport {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\n\nexport default function InlineBannerTextOnly() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner description=\"사업자 정보를 등록해주세요.\" />\n      <ActionableInlineBanner description=\"사업자 정보를 등록해주세요.\" />\n      <DismissibleInlineBanner description=\"사업자 정보를 등록해주세요.\" />\n    </Stack>\n  );\n}",
  "text-button-neutral": "import { IconPlusCircleLine } from \"@daangn/react-monochrome-icon\";\nimport { TextButton } from \"seed-design/ui/text-button\";\n\nexport default function TextButtonNeutral() {\n  return (\n    <TextButton tone=\"neutral\" icon={<IconPlusCircleLine />}>\n      추가\n    </TextButton>\n  );\n}",
  "text-field-prefix": "import { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\nimport { IconMagnifyingglassLine } from \"@daangn/react-monochrome-icon\";\nimport { Columns, Column } from \"seed-design/ui/layout\";\n\nexport default function TextFieldPrefix() {\n  return (\n    <Columns width=\"full\" gap=\"s3\">\n      <Column>\n        <TextField label=\"라벨\" description=\"설명을 써주세요\" prefix=\"https://\">\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n      <Column>\n        <TextField\n          label=\"라벨\"\n          description=\"설명을 써주세요\"\n          prefixIcon={<IconMagnifyingglassLine />}\n        >\n          <TextFieldInput placeholder=\"플레이스홀더\" />\n        </TextField>\n      </Column>\n    </Columns>\n  );\n}",
  "alert-dialog-critical": "import { ActionButton } from \"seed-design/ui/action-button\";\nimport {\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"seed-design/ui/alert-dialog\";\nimport { Column, Columns } from \"@seed-design/react\";\n\nconst AlertDialogCritical = () => {\n  return (\n    // You can set z-index dialog with \"--layer-index\" custom property. useful for stackflow integration.\n    <AlertDialogRoot>\n      <AlertDialogTrigger asChild>\n        <ActionButton>열기</ActionButton>\n      </AlertDialogTrigger>\n      <AlertDialogContent layerIndex={50}>\n        <AlertDialogHeader>\n          <AlertDialogTitle>제목</AlertDialogTitle>\n          <AlertDialogDescription>파괴적, 비가역적 작업을 경고합니다.</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <Columns gap=\"s2\">\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"neutralSolid\">취소</ActionButton>\n              </AlertDialogAction>\n            </Column>\n            <Column>\n              <AlertDialogAction asChild>\n                <ActionButton variant=\"criticalSolid\">확인</ActionButton>\n              </AlertDialogAction>\n            </Column>\n          </Columns>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  );\n};\n\nexport default AlertDialogCritical;",
  "toggle-button-small": "import { useState } from \"react\";\nimport { ToggleButton } from \"seed-design/ui/toggle-button\";\n\nexport default function ToggleButtonSmall() {\n  const [pressed, setPressed] = useState(false);\n\n  return (\n    <ToggleButton size=\"small\" pressed={pressed} onPressedChange={setPressed}>\n      {pressed ? \"선택됨\" : \"미선택\"}\n    </ToggleButton>\n  );\n}",
  "inline-preview": "import { Box, Inline } from \"seed-design/ui/layout\";\n\nexport default function InlinePreview() {\n  return (\n    <Inline background=\"bg.layerDefault\" gap=\"s2\" width=\"full\" borderRadius=\"s2\">\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        1\n      </Box>\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        2\n      </Box>\n      <Box background=\"bg.brandSolid\" paddingX=\"s4\" paddingY=\"s3\" borderRadius=\"s2\">\n        3\n      </Box>\n    </Inline>\n  );\n}",
  "box-preview": "import { Box } from \"seed-design/ui/layout\";\n\nexport default function BoxPreview() {\n  return (\n    <Box\n      background=\"bg.brandWeak\"\n      borderWidth={2}\n      borderColor=\"stroke.brand\"\n      borderRadius=\"s2\"\n      paddingX=\"s3\"\n      paddingY=\"s2\"\n    >\n      Box Example\n    </Box>\n  );\n}",
  "text-field-number-formatting": "import { useMemo, useState } from \"react\";\nimport { TextField, TextFieldInput } from \"seed-design/ui/text-field\";\n\nexport default function TextFieldNumberFormatting() {\n  const [value, setValue] = useState(\"1000\");\n\n  const formattedValue = useMemo(() => {\n    if (value === \"\") return value;\n\n    const number = Number(value.replace(/,/g, \"\"));\n    if (Number.isNaN(number)) return \"\";\n\n    return number.toLocaleString();\n  }, [value]);\n\n  return (\n    <TextField\n      label=\"금액\"\n      description=\"금액을 써주세요\"\n      value={formattedValue}\n      onValueChange={({ value }) => setValue(value)}\n    >\n      <TextFieldInput placeholder=\"9,999,999\" />\n    </TextField>\n  );\n}",
  "action-button-preview": "import { ActionButton } from \"seed-design/ui/action-button\";\n\nexport default function ActionButtonPreview() {\n  return <ActionButton>라벨</ActionButton>;\n}",
  "avatar-stack": "import { Avatar, AvatarStack } from \"seed-design/ui/avatar\";\nimport { IdentityPlaceholder } from \"seed-design/ui/identity-placeholder\";\n\nexport default function AvatarStackExample() {\n  return (\n    <AvatarStack size=\"64\">\n      <Avatar\n        src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n        fallback={<IdentityPlaceholder />}\n      />\n      <Avatar\n        src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n        fallback={<IdentityPlaceholder />}\n      />\n      <Avatar\n        src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n        fallback={<IdentityPlaceholder />}\n      />\n      <Avatar\n        src=\"https://avatars.githubusercontent.com/u/54893898?v=4\"\n        fallback={<IdentityPlaceholder />}\n      />\n    </AvatarStack>\n  );\n}",
  "app-screen-transparent-bar": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport type { ActivityComponentType } from \"@stackflow/react/future\";\nimport {\n  AppBar,\n  AppBarCloseButton,\n  AppBarIconButton,\n  AppBarLeft,\n  AppBarMain,\n  AppBarRight,\n} from \"seed-design/ui/app-bar\";\nimport { AppScreen, AppScreenContent } from \"seed-design/ui/app-screen\";\nimport { Flex } from \"seed-design/ui/layout\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"app-screen-transparent-bar\": unknown;\n  }\n}\n\nconst AppScreenTransparentBarActivity: ActivityComponentType<\"app-screen-transparent-bar\"> = () => {\n  return (\n    <AppScreen theme=\"cupertino\" layerOffsetTop=\"none\">\n      <AppBar tone=\"transparent\">\n        <AppBarLeft>\n          <AppBarCloseButton />\n        </AppBarLeft>\n        <AppBarMain>Preview</AppBarMain>\n        <AppBarRight>\n          <AppBarIconButton aria-label=\"Notification\">\n            <IconBellFill />\n          </AppBarIconButton>\n        </AppBarRight>\n      </AppBar>\n      <AppScreenContent>\n        <Flex\n          height=\"full\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          background=\"palette.gray500\"\n        >\n          Preview\n        </Flex>\n      </AppScreenContent>\n    </AppScreen>\n  );\n};\n\nexport default AppScreenTransparentBarActivity;",
  "control-chip-preview": "import { ControlChip } from \"seed-design/ui/control-chip\";\n\nexport default function ControlChipPreview() {\n  return <ControlChip.Toggle>라벨</ControlChip.Toggle>;\n}",
  "action-chip-preview": "import { ActionChip } from \"seed-design/ui/action-chip\";\n\nexport default function ActionChipPreview() {\n  return <ActionChip>라벨</ActionChip>;\n}",
  "extended-fab-medium": "import { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\n\nexport default function ExtendedFabMedium() {\n  return (\n    <ExtendedFab size=\"medium\" prefixIcon={<IconBellFill />}>\n      알림 설정\n    </ExtendedFab>\n  );\n}",
  "inline-banner-with-icon": "import {\n  ActionableInlineBanner,\n  DismissibleInlineBanner,\n  InlineBanner,\n} from \"seed-design/ui/inline-banner\";\nimport { IconBellFill } from \"@daangn/react-monochrome-icon\";\nimport { Stack } from \"seed-design/ui/layout\";\n\nexport default function InlineBannerWithIcon() {\n  return (\n    <Stack gap=\"s4\" width=\"full\">\n      <InlineBanner icon={<IconBellFill />} description=\"사업자 정보를 등록해주세요.\" />\n      <ActionableInlineBanner icon={<IconBellFill />} description=\"사업자 정보를 등록해주세요.\" />\n      <DismissibleInlineBanner icon={<IconBellFill />} description=\"사업자 정보를 등록해주세요.\" />\n    </Stack>\n  );\n}",
  "badge-weak": "import { Badge } from \"seed-design/ui/badge\";\n\nexport default function BadgeWeak() {\n  return <Badge variant=\"weak\">라벨</Badge>;\n}",
  "demo/index": "import { useState } from \"react\";\nimport { type ActivityComponentType } from \"@stackflow/react/future\";\nimport { AppBar, AppBarMain } from \"seed-design/ui/app-bar\";\nimport { AppScreen, AppScreenContent } from \"seed-design/ui/app-screen\";\nimport { TabsRoot, TabsTrigger, TabsList } from \"seed-design/ui/tabs\";\nimport { ErrorState } from \"seed-design/ui/error-state\";\nimport { SnackbarProvider } from \"seed-design/ui/snackbar\";\nimport { Recommendations } from \"@/components/example/demo/tabs/recommendations\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"demo/index\": unknown;\n  }\n}\n\nconst TABS = [\n  { label: \"추천\", value: \"recommendations\" },\n  { label: \"구독\", value: \"subscriptions\" },\n] as const satisfies {\n  label: string;\n  value: string;\n}[];\n\ntype Tab = (typeof TABS)[number][\"value\"];\n\nconst DemoActivity: ActivityComponentType<\"demo/index\"> = () => {\n  const [tab, setTab] = useState<Tab>(\"recommendations\");\n\n  return (\n    <SnackbarProvider>\n      <style\n        // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n        dangerouslySetInnerHTML={{\n          __html: \"::-webkit-scrollbar{display:none}\",\n        }}\n      />\n      <AppScreen>\n        <AppBar tone=\"layer\">\n          <AppBarMain title=\"Demo\" />\n        </AppBar>\n        <AppScreenContent>\n          <TabsRoot\n            value={tab}\n            onValueChange={(value) => setTab(value as Tab)}\n            triggerLayout=\"fill\"\n            size=\"medium\"\n            stickyList\n            style={{ height: \"100%\", overflowY: \"auto\" }}\n          >\n            <TabsList>\n              {TABS.map(({ label, value }) => (\n                <TabsTrigger key={value} value={value}>\n                  {label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            {tab === \"recommendations\" && <Recommendations />}\n            {tab === \"subscriptions\" && (\n              <ErrorState\n                title=\"구독한 글이 없습니다.\"\n                description=\"추천 글을 확인해보세요.\"\n                primaryActionProps={{\n                  children: \"추천 글 보기\",\n                  onClick: () => setTab(\"recommendations\"),\n                }}\n              />\n            )}\n          </TabsRoot>\n        </AppScreenContent>\n      </AppScreen>\n    </SnackbarProvider>\n  );\n};\n\nexport default DemoActivity;",
  "demo/article-detail": "import { CATEGORIES, type Article } from \"@/components/example/demo/data\";\nimport type { ActivityComponentType } from \"@stackflow/react/future\";\nimport { AppScreen, AppScreenContent } from \"seed-design/ui/app-screen\";\nimport {\n  AppBar,\n  AppBarBackButton,\n  AppBarCloseButton,\n  AppBarRight,\n  AppBarLeft,\n} from \"seed-design/ui/app-bar\";\nimport { Stack, Columns, Column, Box } from \"seed-design/ui/layout\";\nimport { Text } from \"seed-design/ui/text\";\nimport { Badge } from \"seed-design/ui/badge\";\nimport { SegmentedControl, SegmentedControlItem } from \"seed-design/ui/segmented-control\";\nimport { Callout } from \"seed-design/ui/callout\";\nimport { TextField, TextFieldTextarea } from \"seed-design/ui/text-field\";\nimport { ErrorState } from \"seed-design/ui/error-state\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport { Skeleton } from \"seed-design/ui/skeleton\";\nimport { IconILowercaseSerifCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { ArticleAuthor } from \"./components/article-author\";\nimport { formatDate } from \"@/components/example/demo/utils/date\";\nimport { useState } from \"react\";\n\nimport img from \"@/public/penguin.webp\";\n\ndeclare module \"@stackflow/config\" {\n  interface Register {\n    \"demo/article-detail\": {\n      article: Article;\n    };\n  }\n}\n\nconst SEGMENTS = [\n  { value: \"popular\", label: \"인기\" },\n  { value: \"latest\", label: \"최근\" },\n] as const satisfies { value: string; label: string }[];\n\nconst DemoArticleDetail: ActivityComponentType<\"demo/article-detail\"> = ({\n  params: { article },\n}) => {\n  const categoryName = CATEGORIES.find((c) => c.id === article.categoryId)?.name;\n  const [isImageLoading, setIsImageLoading] = useState(true);\n\n  return (\n    <AppScreen layerOffsetTop=\"none\">\n      <AppBar tone=\"transparent\">\n        <AppBarLeft>\n          <AppBarBackButton />\n        </AppBarLeft>\n        <AppBarRight>\n          <AppBarCloseButton />\n        </AppBarRight>\n      </AppBar>\n      <AppScreenContent>\n        <Stack gap=\"s4\">\n          <Box style={{ aspectRatio: \"1 / 1\", position: \"relative\" }}>\n            <img\n              src={img.src}\n              alt=\"penguin\"\n              onLoad={() => setIsImageLoading(false)}\n              style={{ position: \"absolute\", zIndex: 1 }}\n            />\n            {isImageLoading && <Skeleton width=\"full\" height=\"full\" radius=\"0\" />}\n          </Box>\n          <Stack gap=\"s6\" paddingBottom=\"s4\">\n            <Stack\n              paddingX=\"spacingX.globalGutter\"\n              gap=\"spacingY.componentDefault\"\n              alignItems=\"flexStart\"\n            >\n              {article.isPopular && (\n                <Badge variant=\"outline\" tone=\"brand\" size=\"large\">\n                  인기\n                </Badge>\n              )}\n              <Stack gap=\"s1\">\n                <Text as=\"h1\" textStyle=\"titleLargeDefault\" color=\"fg.neutral\">\n                  {article.title}\n                </Text>\n                <Text\n                  as=\"p\"\n                  textStyle=\"bodyMediumReadingDefault\"\n                  color=\"fg.neutralMuted\"\n                  style={{ wordBreak: \"keep-all\" }}\n                >\n                  {article.content}\n                </Text>\n              </Stack>\n              <Columns width=\"full\" alignItems=\"center\">\n                <Column>\n                  <ArticleAuthor author={article.author} />\n                </Column>\n                <Column width=\"content\">\n                  <Text textStyle=\"labelMediumDefault\" color=\"fg.neutralMuted\">\n                    {categoryName} ⸱ {formatDate(article.createdAt)}\n                  </Text>\n                </Column>\n              </Columns>\n            </Stack>\n            <Stack paddingX=\"spacingX.globalGutter\" gap=\"spacingY.componentDefault\">\n              <Callout\n                tone=\"neutral\"\n                description=\"따뜻한 댓글을 남겨주세요.\"\n                icon={<IconILowercaseSerifCircleFill />}\n              />\n              <SegmentedControl\n                aria-label=\"댓글 정렬 방식\"\n                defaultValue={SEGMENTS[0].value}\n                style={{ width: \"100%\" }}\n              >\n                {SEGMENTS.map((tab) => (\n                  <SegmentedControlItem key={tab.value} value={tab.value}>\n                    {tab.label}\n                  </SegmentedControlItem>\n                ))}\n              </SegmentedControl>\n              <Box paddingY=\"s3\">\n                <ErrorState title=\"댓글 없음\" description=\"댓글이 없습니다.\" />\n              </Box>\n              <TextField label=\"댓글\" maxGraphemeCount={200}>\n                <TextFieldTextarea placeholder=\"저는…\" />\n              </TextField>\n              <ActionButton>게시</ActionButton>\n            </Stack>\n          </Stack>\n        </Stack>\n      </AppScreenContent>\n    </AppScreen>\n  );\n};\n\nexport default DemoArticleDetail;",
  "demo/tabs/recommendations": "import { useMemo, useState } from \"react\";\nimport { IconChevronDownFill, IconPenHorizlineFill } from \"@daangn/react-monochrome-icon\";\n\nimport { Flex, Inline, Stack } from \"seed-design/ui/layout\";\nimport { ControlChip } from \"seed-design/ui/control-chip\";\nimport {\n  BottomSheetBody,\n  BottomSheetRoot,\n  BottomSheetContent,\n  BottomSheetFooter,\n  BottomSheetTrigger,\n} from \"seed-design/ui/bottom-sheet\";\nimport { ActionButton } from \"seed-design/ui/action-button\";\nimport { Snackbar, useSnackbarAdapter } from \"seed-design/ui/snackbar\";\nimport { ExtendedFab } from \"seed-design/ui/extended-fab\";\nimport { ARTICLES, CATEGORIES, type Category } from \"@/components/example/demo/data\";\nimport { ArticleListItem } from \"@/components/example/demo/components/article-list-item\";\n\nconst FILTERS = [\n  { label: \"카테고리\", value: \"category\" },\n  { label: \"동네\", value: \"location\" },\n  { label: \"작성자\", value: \"author\" },\n  { label: \"작성 시간\", value: \"createdAt\" },\n] as const satisfies {\n  label: string;\n  value: string;\n}[];\n\ntype Filter = (typeof FILTERS)[number][\"value\"];\n\nexport function Recommendations() {\n  const [currentFilterBottomSheet, setCurrentFilterBottomSheet] = useState<Filter | null>(null);\n\n  const defaultFilters = useMemo(\n    () => ({\n      category: [],\n      location: [],\n      author: [],\n      createdAt: [],\n    }),\n    [],\n  );\n\n  const [selectedFilters, setSelectedFilters] = useState<Record<Filter, string[]>>(defaultFilters);\n\n  const adapter = useSnackbarAdapter();\n\n  const onUnavailableFilterClick = () =>\n    adapter.create({\n      render: () => (\n        <Snackbar\n          message=\"카테고리로만 필터링할 수 있어요.\"\n          variant=\"critical\"\n          actionLabel=\"확인\"\n          onAction={adapter.dismiss}\n        />\n      ),\n    });\n\n  const filteredArticles = useMemo(() => {\n    let filtered = ARTICLES;\n\n    if (selectedFilters.category?.length) {\n      filtered = ARTICLES.filter((article) =>\n        selectedFilters.category?.includes(article.categoryId),\n      );\n    }\n\n    // XXX: Add more filters if needed\n\n    return filtered;\n  }, [selectedFilters]);\n\n  const handleFilterConfirm = (filter: Filter, values: string[]) => {\n    setSelectedFilters((prev) => ({ ...prev, [filter]: values }));\n  };\n\n  return (\n    <Stack gap=\"spacingY.componentDefault\" paddingTop=\"s4\" paddingBottom=\"s16\">\n      <ExtendedFab\n        prefixIcon={<IconPenHorizlineFill />}\n        style={{ position: \"fixed\", insetBlockEnd: \"16px\", insetInlineEnd: \"16px\" }}\n      >\n        글쓰기\n      </ExtendedFab>\n      <Flex gap=\"spacingX.betweenChips\" paddingX=\"spacingX.globalGutter\" overflowX=\"auto\">\n        {FILTERS.map(({ label, value }) => (\n          <BottomSheetRoot\n            key={value}\n            closeOnEscape\n            closeOnInteractOutside\n            open={currentFilterBottomSheet === value}\n            onOpenChange={(open) => setCurrentFilterBottomSheet(open ? value : null)}\n          >\n            {value === \"category\" ? (\n              <BottomSheetTrigger asChild>\n                <ControlChip.Button\n                  size=\"medium\"\n                  layout=\"withText\"\n                  suffixIcon={<IconChevronDownFill />}\n                  onClick={value !== \"category\" ? onUnavailableFilterClick : undefined}\n                >\n                  {selectedFilters[value]?.length\n                    ? selectedFilters[value]\n                        .map((id) => CATEGORIES.find((c) => c.id === id)?.name)\n                        .join(\", \") || label\n                    : label}\n                </ControlChip.Button>\n              </BottomSheetTrigger>\n            ) : (\n              <ControlChip.Button\n                size=\"medium\"\n                layout=\"withText\"\n                suffixIcon={<IconChevronDownFill />}\n                onClick={onUnavailableFilterClick}\n              >\n                {label}\n              </ControlChip.Button>\n            )}\n            <FilterBottomSheet\n              filter={value}\n              currentFilter={selectedFilters[value]}\n              onClose={() => setCurrentFilterBottomSheet(null)}\n              onConfirm={(values) => handleFilterConfirm(value, values)}\n            />\n          </BottomSheetRoot>\n        ))}\n      </Flex>\n      <Stack gap=\"s4\" as=\"ul\">\n        {filteredArticles\n          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n          .map((article) => (\n            <li key={article.id}>\n              <ArticleListItem {...article} />\n            </li>\n          ))}\n      </Stack>\n    </Stack>\n  );\n}\n\nexport function FilterBottomSheet({\n  filter,\n  currentFilter,\n  onClose,\n  onConfirm,\n}: {\n  filter: string;\n  currentFilter: string[];\n  onClose: () => void;\n  onConfirm: (values: string[]) => void;\n}) {\n  const options = useMemo(() => {\n    switch (filter) {\n      case \"category\":\n        return CATEGORIES;\n      // Add more cases for other filters if needed\n      default:\n        return [];\n    }\n  }, [filter]);\n\n  const [selectedOptions, setSelectedOptions] = useState<string[]>(currentFilter);\n\n  return (\n    <BottomSheetContent title={FILTERS.find((f) => f.value === filter)?.label}>\n      <BottomSheetBody>\n        <Inline gap=\"s2\">\n          {options.map((option: Category) => (\n            <ControlChip.Toggle\n              size=\"medium\"\n              layout=\"withText\"\n              key={option.id}\n              checked={selectedOptions.includes(option.id)}\n              onCheckedChange={(checked) =>\n                setSelectedOptions((prev) =>\n                  checked ? [...prev, option.id] : prev.filter((id) => id !== option.id),\n                )\n              }\n            >\n              {option.name}\n            </ControlChip.Toggle>\n          ))}\n        </Inline>\n      </BottomSheetBody>\n      <BottomSheetFooter>\n        <ActionButton\n          variant=\"neutralSolid\"\n          onClick={() => {\n            onConfirm(selectedOptions);\n            onClose();\n          }}\n        >\n          완료\n        </ActionButton>\n      </BottomSheetFooter>\n    </BottomSheetContent>\n  );\n}",
  "demo/components/article-list-item": "import { useFlow } from \"@stackflow/react/future\";\nimport { Inline, Stack } from \"seed-design/ui/layout\";\nimport { Text } from \"seed-design/ui/text\";\nimport { Badge } from \"seed-design/ui/badge\";\nimport { CATEGORIES, type Article } from \"@/components/example/demo/data\";\nimport { ArticleAuthor } from \"@/components/example/demo/components/article-author\";\nimport { formatDate } from \"@/components/example/demo/utils/date\";\n\ntype ArticleProps = Article & {};\n\nexport function ArticleListItem(article: ArticleProps) {\n  const { title, content, author, categoryId, createdAt, isPopular } = article;\n  const categoryName = CATEGORIES.find((c) => c.id === categoryId)?.name;\n  const { push } = useFlow();\n\n  return (\n    <Stack\n      as=\"button\"\n      onClick={() => push(\"demo/article-detail\", { article })}\n      style={{ textAlign: \"start\" }}\n      gap=\"s2_5\"\n      paddingX=\"spacingX.globalGutter\"\n      paddingY=\"s1\"\n    >\n      <Inline justifyContent=\"spaceBetween\" alignItems=\"center\">\n        <ArticleAuthor author={author} />\n      </Inline>\n      <Stack gap=\"s2\">\n        <Stack gap=\"s1\">\n          <Text as=\"h1\" textStyle=\"bodyMediumStrong\" color=\"fg.neutral\" maxLines={1}>\n            {title}\n          </Text>\n          <Text as=\"p\" textStyle=\"bodySmallDefault\" color=\"fg.neutralMuted\" maxLines={2}>\n            {content}\n          </Text>\n        </Stack>\n        <Inline alignItems=\"center\" gap=\"s2\">\n          {isPopular && (\n            <Badge variant=\"outline\" tone=\"brand\">\n              인기\n            </Badge>\n          )}\n          <Text textStyle=\"bodySmallDefault\" color=\"fg.neutralSubtle\">\n            {categoryName} ⸱ 서초2동 ⸱ {formatDate(createdAt)}\n          </Text>\n        </Inline>\n      </Stack>\n    </Stack>\n  );\n}",
  "demo/components/article-author": "import { Avatar } from \"seed-design/ui/avatar\";\nimport { IdentityPlaceholder } from \"seed-design/ui/identity-placeholder\";\nimport { Text } from \"seed-design/ui/text\";\nimport { Inline } from \"seed-design/ui/layout\";\n\nexport function ArticleAuthor({ author }: { author: string }) {\n  return (\n    <Inline gap=\"s1_5\" alignItems=\"center\">\n      <Avatar\n        fallback={<IdentityPlaceholder identity=\"person\" />}\n        size=\"20\"\n        style={{ zIndex: -1 }}\n      />\n      <Text textStyle=\"bodySmallStrong\" color=\"fg.neutral\">\n        {author}\n      </Text>\n    </Inline>\n  );\n}"
}
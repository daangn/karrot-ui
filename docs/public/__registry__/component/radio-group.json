{
  "name": "radio-group",
  "dependencies": [
    "@seed-design/react-radio-group@alpha"
  ],
  "registries": [
    {
      "name": "radio-group.tsx",
      "content": "import {\n  type RadioItemProps,\n  type UseRadioGroupProps,\n  useRadioGroup,\n} from \"@seed-design/react-radio-group\";\nimport { type RadioVariantProps, radio } from \"@seed-design/recipe/radio\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nimport \"@seed-design/stylesheet/radio.css\";\n\nconst RadioContext = React.createContext<{\n  api: ReturnType<typeof useRadioGroup>;\n  size: RadioVariantProps[\"size\"];\n} | null>(null);\n\nconst useRadioContext = () => {\n  const context = React.useContext(RadioContext);\n  if (!context) {\n    throw new Error(\"Radio cannot be rendered outside the RadioGroup\");\n  }\n  return context;\n};\n\nexport interface RadioGroupProps\n  extends Assign<React.HTMLAttributes<HTMLElement>, UseRadioGroupProps>,\n    RadioVariantProps {\n  label?: string;\n}\n\nexport const RadioGroup = React.forwardRef<HTMLInputElement, RadioGroupProps>(\n  ({ className, size = \"medium\", label, children, ...otherProps }, ref) => {\n    const api = useRadioGroup(otherProps);\n    const { rootProps } = api;\n    return (\n      <div ref={ref} {...rootProps} className={className}>\n        <RadioContext.Provider value={{ api, size }}>\n          {children}\n        </RadioContext.Provider>\n      </div>\n    );\n  },\n);\nRadioGroup.displayName = \"RadioGroup\";\n\nexport interface RadioProps\n  extends Assign<React.HTMLAttributes<HTMLInputElement>, RadioItemProps>,\n    RadioVariantProps {\n  label: React.ReactNode;\n}\n\nexport const Radio = React.forwardRef<HTMLInputElement, RadioProps>(\n  ({ className, size, label, ...otherProps }, ref) => {\n    const { api, size: ctxSize } = useRadioContext();\n    const { getItemProps } = api;\n    const { stateProps, restProps, controlProps, hiddenInputProps, rootProps } =\n      getItemProps(otherProps);\n\n    const classNames = radio({ size: size ?? ctxSize });\n    return (\n      <label\n        className={clsx(classNames.root, className)}\n        {...rootProps}\n        {...restProps}\n      >\n        <div {...controlProps} className={classNames.control}>\n          <div {...stateProps} className={classNames.icon} />\n        </div>\n        <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n        <span {...stateProps} className={classNames.label}>\n          {label}\n        </span>\n      </label>\n    );\n  },\n);\nRadio.displayName = \"Radio\";\n"
    }
  ]
}
{
  "name": "inline-banner",
  "dependencies": [
    "@radix-ui/react-slot",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "inline-banner.tsx",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  inlineBanner,\n  type InlineBannerVariantProps,\n} from \"@seed-design/recipe/inlineBanner\";\nimport { IconXmarkLine } from \"@daangn/react-monochrome-icon\";\nimport { useDismissible, type DismissibleProps } from \"../hook/use-dismissible\";\n\ninterface BaseInlineBannerProps extends InlineBannerVariantProps {\n  titleText?: string;\n  prefixIcon?: React.ReactNode;\n}\n\ninterface DismissibleInlineBannerProps\n  extends BaseInlineBannerProps,\n    DismissibleProps {\n  tone?: Exclude<InlineBannerVariantProps[\"tone\"], \"danger\">;\n  dismissAriaLabel?: string;\n  action?: never;\n}\n\ninterface NondismissibleInlineBannerProps\n  extends BaseInlineBannerProps,\n    Partial<Record<keyof DismissibleProps, never>> {\n  dismissAriaLabel?: never;\n  action?: {\n    onClick: React.MouseEventHandler<HTMLButtonElement>;\n    label: string;\n  };\n}\n\nexport type InlineBannerProps =\n  | DismissibleInlineBannerProps\n  | NondismissibleInlineBannerProps;\n\ntype ReactInlineBannerProps = React.HTMLAttributes<HTMLDivElement> &\n  InlineBannerProps;\n\nexport const InlineBanner = React.forwardRef<\n  HTMLDivElement,\n  ReactInlineBannerProps\n>(\n  (\n    {\n      children,\n      className,\n      tone = \"neutral\",\n      prefixIcon,\n      titleText,\n      action,\n      dismissAriaLabel,\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = inlineBanner({ tone });\n\n    const rootRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(ref, () => rootRef.current as HTMLDivElement);\n\n    const { isOpen, onDismissButtonClick } = useDismissible({\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n    });\n\n    if (!isOpen) return null;\n\n    return (\n      <div\n        ref={rootRef}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          {prefixIcon && (\n            <Slot className={classNames.prefixIcon}>{prefixIcon}</Slot>\n          )}\n          <div>\n            {titleText && (\n              <>\n                <span className={classNames.title}>{titleText}</span>\n                <span className={classNames.spacer}> </span>\n              </>\n            )}\n            <span className={classNames.label}>{children}</span>\n          </div>\n        </div>\n        {dismissAriaLabel && (\n          <button\n            type=\"button\"\n            aria-label={dismissAriaLabel}\n            className={classNames.dismissButton}\n            onClick={onDismissButtonClick}\n          >\n            <IconXmarkLine className={classNames.xIcon} />\n          </button>\n        )}\n        {action && (\n          <button\n            type=\"button\"\n            className={classNames.actionLabel}\n            onClick={action.onClick}\n          >\n            {action.label}\n          </button>\n        )}\n      </div>\n    );\n  },\n);\nInlineBanner.displayName = \"InlineBanner\";\n"
    },
    {
      "name": "use-dismissible.ts",
      "content": "import * as React from \"react\";\n\nexport interface DismissibleProps {\n  /**\n   * @default true\n   */\n  defaultOpen?: boolean;\n  isOpen?: boolean;\n  onDismiss?: () => void;\n}\n\nexport function useDismissible({\n  defaultOpen = true,\n  isOpen: isPropOpen,\n  onDismiss,\n}: DismissibleProps) {\n  const [isStateOpen, setIsStateOpen] = React.useState(\n    isPropOpen ?? defaultOpen,\n  );\n\n  function onDismissButtonClick() {\n    onDismiss?.();\n\n    if (isPropOpen === undefined) {\n      setIsStateOpen(false);\n    }\n  }\n\n  React.useEffect(() => {\n    if (isPropOpen !== undefined && isPropOpen !== isStateOpen) {\n      setIsStateOpen(isPropOpen);\n    }\n  }, [isPropOpen, isStateOpen]);\n\n  return {\n    isOpen: isStateOpen,\n    onDismissButtonClick,\n  };\n}\n"
    }
  ]
}
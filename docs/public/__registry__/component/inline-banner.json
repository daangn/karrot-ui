{
  "name": "inline-banner",
  "dependencies": [],
  "registries": [
    {
      "name": "inline-banner.tsx",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  inlineBanner,\n  type InlineBannerVariantProps,\n} from \"@seed-design/recipe/inlineBanner\";\n\ninterface BaseInlineBannerProps extends InlineBannerVariantProps {\n  prefixIcon?: React.ReactNode;\n}\n\ninterface DismissibleInlineBannerProps extends BaseInlineBannerProps {\n  tone?: Exclude<InlineBannerVariantProps[\"tone\"], \"danger\">;\n  dismissAriaLabel?: string;\n  action?: never;\n}\n\ninterface NondismissibleInlineBannerProps extends BaseInlineBannerProps {\n  dismissAriaLabel?: never;\n  action?: {\n    onClick: React.MouseEventHandler<HTMLButtonElement>;\n    label: string;\n  };\n}\n\nexport type InlineBannerProps =\n  | DismissibleInlineBannerProps\n  | NondismissibleInlineBannerProps;\n\ntype ReactInlineBannerProps = React.HTMLAttributes<HTMLDivElement> &\n  InlineBannerProps;\n\nconst XmarkLine = React.forwardRef<\n  SVGSVGElement,\n  React.SVGProps<SVGSVGElement>\n>((props, ref) => (\n  // FIXME\n  // biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>\n  <svg\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-seed-icon=\"true\"\n    data-seed-icon-version=\"0.0.0-alpha-20241022092043\"\n    width=\"16\"\n    height=\"16\"\n    ref={ref}\n    {...props}\n  >\n    <g>\n      <path\n        d=\"M20.7071 4.70711C21.0976 4.31658 21.0976 3.68342 20.7071 3.29289C20.3166 2.90237 19.6834 2.90237 19.2929 3.29289L12 10.5858L4.70711 3.29289C4.31658 2.90237 3.68342 2.90237 3.29289 3.29289C2.90237 3.68342 2.90237 4.31658 3.29289 4.70711L10.5858 12L3.29289 19.2929C2.90237 19.6834 2.90237 20.3166 3.29289 20.7071C3.68342 21.0976 4.31658 21.0976 4.70711 20.7071L12 13.4142L19.2929 20.7071C19.6834 21.0976 20.3166 21.0976 20.7071 20.7071C21.0976 20.3166 21.0976 19.6834 20.7071 19.2929L13.4142 12L20.7071 4.70711Z\"\n        fill=\"currentColor\"\n      />\n    </g>\n  </svg>\n));\n\nexport const InlineBanner = React.forwardRef<\n  HTMLDivElement,\n  ReactInlineBannerProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"weak\",\n      tone = \"neutral\",\n      prefixIcon,\n      action,\n      dismissAriaLabel,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = inlineBanner({ variant, tone });\n\n    const rootRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(ref, () => rootRef.current as HTMLDivElement);\n\n    return (\n      <div\n        ref={rootRef}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          {prefixIcon && (\n            <Slot className={classNames.prefixIcon}>{prefixIcon}</Slot>\n          )}\n          <span className={classNames.label}>{children}</span>\n        </div>\n        {dismissAriaLabel && (\n          <button\n            type=\"button\"\n            aria-label={dismissAriaLabel}\n            className={classNames.dismissButton}\n            onClick={() => rootRef.current?.remove()}\n          >\n            <XmarkLine className={classNames.xIcon} />\n          </button>\n        )}\n        {action && (\n          <button\n            type=\"button\"\n            className={classNames.actionLabel}\n            onClick={action.onClick}\n          >\n            {action.label}\n          </button>\n        )}\n      </div>\n    );\n  },\n);\nInlineBanner.displayName = \"InlineBanner\";\n"
    }
  ]
}
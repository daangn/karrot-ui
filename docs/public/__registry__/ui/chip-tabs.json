{
  "name": "chip-tabs",
  "dependencies": [
    "@seed-design/react-tabs@0.0.0-alpha-20241209060641"
  ],
  "registries": [
    {
      "name": "chip-tabs.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  useLazyContents,\n  useTabs,\n  type ContentProps,\n  type TriggerProps,\n  type UseLazyContentsProps,\n  type UseTabsProps,\n} from \"@seed-design/react-tabs\";\nimport { chipTab } from \"@seed-design/recipe/chipTab\";\nimport { type ChipTabsVariant, chipTabs } from \"@seed-design/recipe/chipTabs\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport \"@seed-design/stylesheet/chipTab.css\";\nimport \"@seed-design/stylesheet/chipTabs.css\";\n\ntype Assign<T, U> = Omit<T, keyof U> & U;\n\ninterface ChipTabsContextValue {\n  api: ReturnType<typeof useTabs>;\n  classNames: ReturnType<typeof chipTabs>;\n  shouldRender: (value: string) => boolean;\n  variant: ChipTabsVariant[\"variant\"];\n}\n\nconst ChipTabsContext = React.createContext<ChipTabsContextValue | null>(null);\n\nconst useChipTabsContext = () => {\n  const context = React.useContext(ChipTabsContext);\n  if (!context) {\n    throw new Error(\"Tabs cannot be rendered outside the Tabs\");\n  }\n  return context;\n};\n\nexport interface ChipTabsProps\n  extends Assign<\n      React.HTMLAttributes<HTMLDivElement>,\n      Omit<UseTabsProps, \"layout\">\n    >,\n    ChipTabsVariant,\n    Omit<UseLazyContentsProps, \"currentValue\"> {}\n\nexport const ChipTabs = React.forwardRef<HTMLDivElement, ChipTabsProps>(\n  (props, ref) => {\n    const { className, lazyMode, isLazy, variant } = props;\n    const api = useTabs(props);\n    const classNames = chipTabs({\n      variant,\n    });\n    const { rootProps, value, restProps } = api;\n    const { shouldRender } = useLazyContents({\n      currentValue: value,\n      lazyMode,\n      isLazy,\n    });\n\n    return (\n      <div\n        ref={ref}\n        {...rootProps}\n        {...restProps}\n        className={clsx(classNames.root, className)}\n      >\n        <ChipTabsContext.Provider\n          value={{\n            api,\n            classNames,\n            shouldRender,\n            variant,\n          }}\n        >\n          {props.children}\n        </ChipTabsContext.Provider>\n      </div>\n    );\n  },\n);\nChipTabs.displayName = \"ChipTabs\";\n\nexport const ChipTabTriggerList = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...otherProps }, ref) => {\n  const { api, classNames } = useChipTabsContext();\n  const { tabTriggerListProps, triggerSize } = api;\n  const { left } = triggerSize;\n  const { triggerList } = classNames;\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current?.scrollTo({\n        // NOTE: 27px is half of tab's min-width\n        left: left - 27,\n        behavior: \"smooth\",\n      });\n    }\n  }, [left]);\n\n  return (\n    <div\n      ref={containerRef}\n      {...tabTriggerListProps}\n      className={clsx(triggerList, className)}\n      {...otherProps}\n    >\n      {children}\n    </div>\n  );\n});\nChipTabTriggerList.displayName = \"ChipTabTriggerList\";\n\nexport interface ChipTabTriggerProps\n  extends Assign<React.HTMLAttributes<HTMLButtonElement>, TriggerProps> {}\n\nexport const ChipTabTrigger = React.forwardRef<\n  HTMLButtonElement,\n  ChipTabTriggerProps\n>(({ className, children, value, isDisabled, ...otherProps }, ref) => {\n  const { api, variant } = useChipTabsContext();\n  const { getTabTriggerProps } = api;\n  const { label, root } = chipTab({\n    variant,\n  });\n  const { rootProps, labelProps } = getTabTriggerProps({ value, isDisabled });\n\n  return (\n    <button\n      ref={ref}\n      {...rootProps}\n      className={clsx(root, className)}\n      {...otherProps}\n    >\n      <span className={label} {...labelProps}>\n        {children}\n      </span>\n    </button>\n  );\n});\nChipTabTrigger.displayName = \"ChipTabTrigger\";\n\nexport const ChipTabContent = React.forwardRef<\n  HTMLDivElement,\n  Assign<React.HTMLAttributes<HTMLDivElement>, ContentProps>\n>(({ className, children, value, ...otherProps }, ref) => {\n  const { api, classNames, shouldRender } = useChipTabsContext();\n  const { getTabContentProps } = api;\n  const { content } = classNames;\n  const tabContentProps = getTabContentProps({ value });\n  const isRender = shouldRender(value);\n\n  return (\n    <div\n      ref={ref}\n      {...tabContentProps}\n      className={clsx(content, className)}\n      {...otherProps}\n    >\n      {isRender && children}\n    </div>\n  );\n});\nChipTabContent.displayName = \"ChipTabContent\";\n"
    }
  ]
}
{
  "name": "snackbar",
  "dependencies": [
    "@seed-design/react",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "snackbar.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/snackbar.css\";\nimport \"@seed-design/stylesheet/snackbarRegion.css\";\n\nimport {\n  Snackbar as SeedSnackbar,\n  useSnackbarAdapter as useSeedSnackbarAdapter,\n  useSnackbarContext,\n  type CreateSnackbarOptions as SeedCreateSnackbarOptions,\n} from \"@seed-design/react\";\nimport * as React from \"react\";\n\nimport IconCheckmarkCircleFill from \"@daangn/react-monochrome-icon/IconCheckmarkCircleFill\";\nimport IconExclamationmarkCircleFill from \"@daangn/react-monochrome-icon/IconExclamationmarkCircleFill\";\n\nexport interface SnackbarProviderProps extends SeedSnackbar.RootProviderProps {}\n\nexport const SnackbarProvider = (props: SnackbarProviderProps) => {\n  const { children, ...otherProps } = props;\n  return (\n    <SeedSnackbar.RootProvider {...otherProps}>\n      {children}\n      <SeedSnackbar.Region>\n        <SeedSnackbar.Renderer />\n      </SeedSnackbar.Region>\n    </SeedSnackbar.RootProvider>\n  );\n};\n\nexport interface SnackbarProps extends SeedSnackbar.RootProps {\n  message: string;\n\n  actionLabel: string;\n\n  onAction: () => void;\n\n  /**\n   * @default true\n   */\n  shouldCloseOnAction?: boolean;\n}\n\nexport const Snackbar = React.forwardRef<HTMLDivElement, SnackbarProps>(\n  (\n    {\n      variant = \"default\",\n      children,\n      message,\n      actionLabel,\n      onAction,\n      shouldCloseOnAction = true,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const api = useSnackbarContext();\n\n    const handleAction: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n      e.stopPropagation();\n      onAction();\n      if (shouldCloseOnAction) {\n        e.currentTarget.blur();\n        api.dismiss();\n      }\n    };\n\n    return (\n      <SeedSnackbar.Root ref={ref} variant={variant} {...otherProps}>\n        <SeedSnackbar.PrefixIcon\n          svg={\n            variant === \"positive\" ? (\n              <IconCheckmarkCircleFill />\n            ) : variant === \"danger\" ? (\n              <IconExclamationmarkCircleFill />\n            ) : null\n          }\n        />\n        <SeedSnackbar.Message>{message}</SeedSnackbar.Message>\n        <SeedSnackbar.ActionButton onClick={handleAction}>\n          {actionLabel}\n        </SeedSnackbar.ActionButton>\n        <SeedSnackbar.CloseButton />\n      </SeedSnackbar.Root>\n    );\n  },\n);\nSnackbar.displayName = \"Snackbar\";\n\n// TODO: re-export is ugly; should we namespace CreateSnackbarOptions into Snackbar?\nexport interface CreateSnackbarOptions extends SeedCreateSnackbarOptions {}\n\nexport const useSnackbarAdapter = useSeedSnackbarAdapter;\n\nexport const SnackbarAvoidOverlap = SeedSnackbar.AvoidOverlap;\n"
    }
  ]
}
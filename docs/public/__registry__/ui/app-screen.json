{
  "name": "app-screen",
  "dependencies": [
    "@seed-design/stackflow"
  ],
  "registries": [
    {
      "name": "app-screen.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  IconChevronLeftLine,\n  IconXmarkLine,\n} from \"@daangn/react-monochrome-icon\";\nimport {\n  AppBar as SeedAppBar,\n  AppScreen as SeedAppScreen,\n} from \"@seed-design/stackflow\";\nimport { useActions, useActivity } from \"@stackflow/react\";\nimport { forwardRef, useCallback } from \"react\";\n\nexport type AppBarProps = SeedAppBar.RootProps;\n\nexport type AppScreenProps = SeedAppScreen.RootProps;\n\nexport const AppBar = SeedAppBar.Root;\n\nexport const Left = SeedAppBar.Left;\n\nexport const Right = SeedAppBar.Right;\n\nexport const Title = SeedAppBar.Title;\n\nexport const IconButton = SeedAppBar.IconButton;\n\nexport const BackButton = forwardRef<\n  HTMLButtonElement,\n  SeedAppBar.IconButtonProps\n>(({ children = <IconChevronLeftLine />, onClick, ...otherProps }, ref) => {\n  const activity = useActivity();\n  const actions = useActions();\n\n  const handleOnClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n\n      if (!e.defaultPrevented) {\n        actions.pop();\n      }\n    },\n    [actions],\n  );\n\n  if (!activity) {\n    return null;\n  }\n  if (activity.isRoot) {\n    return null;\n  }\n\n  return (\n    <SeedAppBar.IconButton\n      ref={ref}\n      aria-label=\"Go Back\"\n      type=\"button\"\n      onClick={handleOnClick}\n      {...otherProps}\n    >\n      {children}\n    </SeedAppBar.IconButton>\n  );\n});\nBackButton.displayName = \"BackButton\";\n\nexport const CloseButton = forwardRef<\n  HTMLButtonElement,\n  SeedAppBar.IconButtonProps\n>(({ children = <IconXmarkLine />, onClick, ...otherProps }, ref) => {\n  const activity = useActivity();\n\n  const handleOnClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n\n      if (!e.defaultPrevented) {\n        // you can do something here\n      }\n    },\n    [],\n  );\n\n  const isRoot = !activity || activity.isRoot;\n\n  if (!isRoot) {\n    return null;\n  }\n\n  return (\n    <IconButton\n      ref={ref}\n      aria-label=\"Close\"\n      type=\"button\"\n      onClick={handleOnClick}\n      {...otherProps}\n    >\n      {children}\n    </IconButton>\n  );\n});\nCloseButton.displayName = \"CloseButton\";\n\nexport const AppScreen = forwardRef<HTMLDivElement, AppScreenProps>(\n  ({ children, ...otherProps }, ref) => {\n    return (\n      <SeedAppScreen.Root ref={ref} {...otherProps}>\n        <SeedAppScreen.Dim />\n        <SeedAppScreen.Layer>{children}</SeedAppScreen.Layer>\n        <SeedAppScreen.Edge />\n      </SeedAppScreen.Root>\n    );\n  },\n);\nAppScreen.displayName = \"AppScreen\";\n"
    }
  ]
}
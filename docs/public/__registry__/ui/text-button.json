{
  "name": "text-button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "text-button.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/textButton.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  textButton,\n  type TextButtonVariantProps,\n} from \"@seed-design/recipe/textButton\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nexport type TextButtonProps = TextButtonVariantProps &\n  React.ButtonHTMLAttributes<HTMLButtonElement> &\n  ({\n    /**\n     * @default false\n     */\n    asChild?: boolean;\n  } & (\n    | { prefixIcon: React.ReactNode; suffixIcon?: never }\n    | { prefixIcon?: never; suffixIcon: React.ReactNode }\n  ));\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/text-button\n */\nexport const TextButton = React.forwardRef<HTMLButtonElement, TextButtonProps>(\n  (\n    {\n      asChild = false,\n      className,\n      tone = \"brand\",\n      size = \"medium\",\n      prefixIcon,\n      suffixIcon,\n      children,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = textButton({ tone, size });\n\n    return (\n      <button\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        {prefixIcon && (\n          <Slot aria-hidden className={classNames.prefixIcon}>\n            {prefixIcon}\n          </Slot>\n        )}\n        <span className={classNames.label}>{children}</span>\n        {suffixIcon && (\n          <Slot aria-hidden className={classNames.suffixIcon}>\n            {suffixIcon}\n          </Slot>\n        )}\n      </button>\n    );\n  },\n);\nTextButton.displayName = \"TextButton\";\n"
    }
  ]
}
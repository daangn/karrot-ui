{
  "name": "text-button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "text-button.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/textButton.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  textButton,\n  type TextButtonVariantProps,\n} from \"@seed-design/recipe/textButton\";\n\nexport interface TextButtonProps extends TextButtonVariantProps {\n  icon: React.ReactNode;\n\n  /**\n   * @default \"leading\"\n   */\n  iconPosition?: \"leading\" | \"trailing\";\n\n  /**\n   * @default false\n   */\n  asChild?: boolean;\n}\n\ninterface ReactTextButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    TextButtonProps {}\n\nexport const TextButton = React.forwardRef<\n  HTMLButtonElement,\n  ReactTextButtonProps\n>(\n  (\n    {\n      className,\n      variant = \"brand\",\n      size = \"medium\",\n      icon,\n      iconPosition = \"leading\",\n      children,\n      asChild = false,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const classNames = textButton({ variant, size });\n\n    return (\n      <Comp\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        {iconPosition === \"leading\" && (\n          <Slot className={classNames.icon}>{icon}</Slot>\n        )}\n        <span className={classNames.label}>{children}</span>\n        {iconPosition === \"trailing\" && (\n          <Slot className={classNames.icon}>{icon}</Slot>\n        )}\n      </Comp>\n    );\n  },\n);\nTextButton.displayName = \"textButton\";\n"
    }
  ]
}
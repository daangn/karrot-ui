{
  "name": "segmented-control",
  "dependencies": [
    "@seed-design/react-tabs@alpha"
  ],
  "registries": [
    {
      "name": "segmented-control.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/segmentedControl.css\";\nimport {\n  useTabs,\n  type TriggerProps,\n  type UseTabsProps,\n} from \"@seed-design/react-tabs\";\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  segmentedControl,\n  type SegmentedControlVariantProps,\n} from \"@seed-design/recipe/segmentedControl\";\nimport type { Assign } from \"../util/types\";\nexport interface SegmentedControlProps extends SegmentedControlVariantProps {}\n\nconst TabsContext = React.createContext<{\n  api: ReturnType<typeof useTabs>;\n} | null>(null);\n\nconst useTabsContext = () => {\n  const context = React.useContext(TabsContext);\n  if (!context)\n    throw new Error(\n      \"SegmentedControlOption cannot be rendered outside the SegmentedControl\",\n    );\n\n  return context;\n};\n\nexport interface SegmentedControlProps\n  extends SegmentedControlVariantProps,\n    Pick<UseTabsProps, \"value\" | \"defaultValue\" | \"onValueChange\"> {}\n\ntype ReactSegmentedControlProps = SegmentedControlProps &\n  Assign<React.HTMLAttributes<HTMLDivElement>, UseTabsProps>;\n\nexport const SegmentedControl = React.forwardRef<\n  // HTMLFieldSetElement,\n  HTMLDivElement,\n  ReactSegmentedControlProps\n>(({ className, children, style, ...otherProps }, ref) => {\n  const api = useTabs(otherProps);\n  const { tabTriggerListProps, triggerSize, tabIndicatorProps } = api;\n\n  const { left, width } = triggerSize;\n\n  // TODO: value/defaultvalue 없는 경우 첫 번째 아이템으로 default (tabs 참고)\n\n  const classNames = segmentedControl();\n\n  return (\n    <div\n      style={{\n        ...style,\n        // XXX: tabCount 썼을 때 hydration 문제\n        gridTemplateColumns: `repeat(${React.Children.count(children)}, 1fr)`,\n      }}\n      className={clsx(classNames.root, className)}\n      ref={ref}\n      {...tabTriggerListProps}\n      {...otherProps}\n    >\n      <TabsContext.Provider value={{ api }}>{children}</TabsContext.Provider>\n      <div\n        aria-hidden\n        className={classNames.indicator}\n        {...tabIndicatorProps}\n        style={{ left, width }}\n      />\n    </div>\n  );\n});\nSegmentedControl.displayName = \"SegmentedControl\";\n\nexport interface SegmentedControlOptionProps\n  extends SegmentedControlVariantProps,\n    Omit<TriggerProps, \"isDisabled\"> {}\n\ntype ReactSegmentedControlOptionProps = Assign<\n  React.HTMLAttributes<HTMLButtonElement>,\n  SegmentedControlOptionProps\n>;\n\nexport const SegmentedControlOption = React.forwardRef<\n  HTMLButtonElement,\n  ReactSegmentedControlOptionProps\n>(({ className, children, value, ...otherProps }, ref) => {\n  const {\n    api: { getTabTriggerProps },\n  } = useTabsContext();\n\n  const { rootProps, labelProps } = getTabTriggerProps({ value });\n\n  const classNames = segmentedControl();\n\n  return (\n    <button\n      ref={ref}\n      className={clsx(classNames.option, className)}\n      {...rootProps}\n      {...otherProps}\n    >\n      <span className={classNames.optionLabel} {...labelProps} tabIndex={-1}>\n        {children}\n      </span>\n      <span aria-hidden className={classNames.optionLabelPlaceholder}>\n        {children}\n      </span>\n    </button>\n  );\n});\n\nSegmentedControlOption.displayName = \"SegmentedControlOption\";\n"
    }
  ]
}
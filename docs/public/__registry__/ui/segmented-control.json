{
  "name": "segmented-control",
  "dependencies": [
    "@seed-design/react-radio-group@alpha"
  ],
  "registries": [
    {
      "name": "segmented-control.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/segmentedControl.css\";\n\nimport {\n  useTabs,\n  type TriggerProps,\n  type UseTabsProps,\n} from \"@seed-design/react-tabs\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\n\nimport {\n  segmentedControl,\n  type SegmentedControlVariantProps,\n} from \"@seed-design/recipe/segmentedControl\";\n\nexport interface SegmentedControlProps extends SegmentedControlVariantProps {}\n\nimport type { Assign } from \"../util/types\";\n\nconst TabsContext = React.createContext<{\n  api: ReturnType<typeof useTabs>;\n} | null>(null);\n\nconst useTabsContext = () => {\n  const context = React.useContext(TabsContext);\n  if (!context)\n    throw new Error(\n      \"SegmentedControlOption cannot be rendered outside the SegmentedControl\",\n    );\n\n  return context;\n};\n\nexport interface SegmentedControlProps\n  extends SegmentedControlVariantProps,\n    UseTabsProps {}\n\ntype ReactSegmentedControlProps = SegmentedControlProps &\n  Assign<React.HTMLAttributes<HTMLFieldSetElement>, UseTabsProps>;\n\nexport const SegmentedControl = React.forwardRef<\n  // HTMLFieldSetElement,\n  HTMLDivElement,\n  ReactSegmentedControlProps\n>(({ className, children, ...otherProps }, ref) => {\n  const api = useTabs(otherProps);\n  const { tabTriggerListProps, triggerSize, tabIndicatorProps } = api;\n\n  const { left, width } = triggerSize;\n\n  // TODO: value/defaultvalue 없는 경우 첫 번째 아이템으로 default (tabs 참고)\n\n  const classNames = segmentedControl();\n\n  return (\n    <div // TODO: fieldset으로 교체\n      ref={ref}\n      className={clsx(classNames.root, className)}\n      {...tabTriggerListProps}\n      {...otherProps}\n    >\n      <TabsContext.Provider value={{ api }}>\n        {children}\n        <div\n          aria-hidden\n          className={classNames.indicator}\n          {...tabIndicatorProps}\n          style={{\n            left,\n            width,\n            willChange: \"left, width\",\n            // XXX: 임의\n            transition: \"left 0.2s, width 0.2s\",\n          }}\n        />\n      </TabsContext.Provider>\n    </div>\n  );\n});\nSegmentedControl.displayName = \"SegmentedControl\";\n\nexport interface SegmentedControlOptionProps\n  extends SegmentedControlVariantProps {}\n\ntype ReactSegmentedControlOptionProps = SegmentedControlOptionProps &\n  Assign<\n    React.HTMLAttributes<HTMLButtonElement>,\n    Omit<TriggerProps, \"isDisabled\">\n  >;\n\nexport const SegmentedControlOption = React.forwardRef<\n  HTMLButtonElement,\n  ReactSegmentedControlOptionProps\n>(({ className, children, value, ...otherProps }, ref) => {\n  const {\n    api: { getTabTriggerProps },\n  } = useTabsContext();\n\n  const { rootProps } = getTabTriggerProps({ value });\n\n  const classNames = segmentedControl();\n\n  return (\n    <button\n      ref={ref}\n      {...rootProps}\n      {...otherProps}\n      className={clsx(classNames.option, className)}\n      // style={{\n      //   ...(rootProps[\"data-value\"] === \"1\"\n      //     ? {\n      //         borderStartEndRadius: 0,\n      //         borderEndEndRadius: 0,\n      //       }\n      //     : {}),\n      //   ...(rootProps[\"data-value\"] === `${tabCount}`\n      //     ? {\n      //         borderStartStartRadius: 0,\n      //         borderEndStartRadius: 0,\n      //       }\n      //     : {}),\n      // }}\n    >\n      {children}\n    </button>\n  );\n\n  // return (\n  //   <label\n  //     className={clsx(classNames.item, className)}\n  // \t\t{...otherProps}\n  //   >\n  //     <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n  //     {/* TODO */}\n  //     <div {...stateProps}>{children}</div>\n  //   </label>\n  // );\n});\n\nSegmentedControlOption.displayName = \"SegmentedControlOption\";\n"
    }
  ]
}
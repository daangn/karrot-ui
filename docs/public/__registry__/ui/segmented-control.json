{
  "name": "segmented-control",
  "dependencies": [
    "@seed-design/react-segmented-control"
  ],
  "registries": [
    {
      "name": "segmented-control.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/segmentedControl.css\";\nimport {\n  useSegmentedControl,\n  type SegmentItemProps,\n  type UseSegmentedControlProps,\n} from \"@seed-design/react-segmented-control\";\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  segmentedControl,\n  type SegmentedControlVariantProps,\n} from \"@seed-design/recipe/segmentedControl\";\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nconst SegmentedControlContext = React.createContext<{\n  api: ReturnType<typeof useSegmentedControl>;\n} | null>(null);\n\nconst useSegmentedControlContext = () => {\n  const context = React.useContext(SegmentedControlContext);\n  if (!context)\n    throw new Error(\"Segment cannot be rendered outside the SegmentedControl\");\n\n  return context;\n};\n\nexport type SegmentedControlProps = SegmentedControlVariantProps &\n  UseSegmentedControlProps & {};\n\ntype ReactSegmentedControlProps = Assign<\n  React.HTMLAttributes<HTMLDivElement>,\n  SegmentedControlProps\n>;\n\nexport const SegmentedControl = React.forwardRef<\n  HTMLDivElement,\n  ReactSegmentedControlProps\n>(({ className, children, ...otherProps }, ref) => {\n  const api = useSegmentedControl(otherProps);\n\n  const { rootProps, restProps, indicatorProps } = api;\n\n  const classNames = segmentedControl();\n\n  const [mounted, setMounted] = React.useState(false);\n  React.useEffect(() => setMounted(true), []);\n\n  return (\n    <div\n      ref={ref}\n      {...rootProps}\n      {...restProps}\n      {...(!mounted && { style: { display: \"flex\" } })}\n      className={clsx(classNames.root, className)}\n    >\n      {/* TODO */}\n      {/* <div {...labelProps} className={classNames.label} /> */}\n      <SegmentedControlContext.Provider value={{ api }}>\n        {children}\n      </SegmentedControlContext.Provider>\n      <div aria-hidden className={classNames.indicator} {...indicatorProps} />\n    </div>\n  );\n});\nSegmentedControl.displayName = \"SegmentedControl\";\n\nexport interface SegmentProps extends SegmentItemProps {}\n\ntype ReactSegmentProps = Assign<\n  React.HTMLAttributes<HTMLLabelElement>,\n  SegmentProps\n>;\n\nexport const Segment = React.forwardRef<HTMLLabelElement, ReactSegmentProps>(\n  ({ className, children, value, ...otherProps }, ref) => {\n    const {\n      api: { getSegmentProps },\n    } = useSegmentedControlContext();\n\n    const { rootProps, hiddenInputProps, stateProps } = getSegmentProps({\n      value,\n    });\n    const classNames = segmentedControl();\n\n    return (\n      <label\n        ref={ref}\n        className={clsx(classNames.segment, className)}\n        {...rootProps}\n        {...otherProps}\n      >\n        <input {...hiddenInputProps} style={visuallyHidden} />\n        <div {...stateProps} className={classNames.segmentLabel}>\n          {children}\n        </div>\n        <div aria-hidden className={classNames.segmentLabelPlaceholder}>\n          {children}\n        </div>\n      </label>\n    );\n  },\n);\n\nSegment.displayName = \"Segment\";\n"
    }
  ]
}
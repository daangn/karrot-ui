{
  "name": "select-box-group",
  "dependencies": [
    "@seed-design/react-checkbox@0.0.0-alpha-20241030023710",
    "@seed-design/react-radio-group@0.0.0-alpha-20241030023710",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "select-box-group.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  useRadioGroup,\n  type UseRadioGroupProps,\n  type RadioItemProps,\n} from \"@seed-design/react-radio-group\";\nimport {\n  useCheckbox,\n  type UseCheckboxProps,\n} from \"@seed-design/react-checkbox\";\nimport {\n  type SelectBoxVariantProps,\n  selectBox,\n} from \"@seed-design/recipe/selectBox\";\nimport { radio } from \"@seed-design/recipe/radio\";\nimport {\n  checkbox,\n  type CheckboxVariantProps,\n} from \"@seed-design/recipe/checkbox\";\nimport {\n  IconCheckmarkFatFill,\n  IconMinusFatFill,\n} from \"@daangn/react-monochrome-icon\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nimport \"@seed-design/stylesheet/radio.css\";\nimport \"@seed-design/stylesheet/checkbox.css\";\nimport \"@seed-design/stylesheet/selectBox.css\";\n\nconst SelectBoxRadioGroupContext = React.createContext<{\n  api: ReturnType<typeof useRadioGroup>;\n} | null>(null);\n\nconst useSelectBoxContext = () => {\n  const context = React.useContext(SelectBoxRadioGroupContext);\n  if (!context)\n    throw new Error(\n      \"SelectBoxRadio cannot be rendered outside the SelectBoxRadioGroup\",\n    );\n\n  return context;\n};\n\nexport interface SelectBoxRadioGroupProps\n  extends Omit<UseRadioGroupProps, \"disabled\"> {}\n\nexport const SelectBoxRadioGroup = React.forwardRef<\n  HTMLDivElement,\n  Assign<React.HTMLAttributes<HTMLDivElement>, SelectBoxRadioGroupProps>\n>(({ className, children, ...otherProps }, ref) => {\n  const api = useRadioGroup(otherProps);\n  const {\n    rootProps: { \"aria-labelledby\": _, ...rootProps },\n    restProps,\n  } = api;\n\n  const classNames = selectBox();\n\n  return (\n    <div\n      ref={ref}\n      {...rootProps}\n      {...restProps}\n      className={clsx(classNames.root, className)}\n    >\n      {/* <div {...labelProps}>\n        {label}\n      </div> */}\n      <SelectBoxRadioGroupContext.Provider value={{ api }}>\n        {children}\n      </SelectBoxRadioGroupContext.Provider>\n    </div>\n  );\n});\nSelectBoxRadioGroup.displayName = \"SelectBoxRadioGroup\";\n\nexport interface SelectBoxRadioProps\n  extends SelectBoxVariantProps,\n    Omit<RadioItemProps, \"disabled\" | \"invalid\"> {\n  label: string;\n  description?: string;\n}\n\ntype ReactSelectBoxRadio = Assign<\n  Omit<React.HTMLAttributes<HTMLInputElement>, \"children\">,\n  SelectBoxRadioProps\n>;\n\nexport const SelectBoxRadio = React.forwardRef<\n  HTMLInputElement,\n  ReactSelectBoxRadio\n>(({ className, label, description, ...otherProps }, ref) => {\n  const { api } = useSelectBoxContext();\n  const { getItemProps } = api;\n  const { rootProps, restProps, hiddenInputProps, controlProps, stateProps } =\n    getItemProps(otherProps);\n\n  const radioClassNames = radio({ size: \"large\" });\n  const selectBoxClassNames = selectBox();\n\n  return (\n    <label\n      className={clsx(selectBoxClassNames.box, className)}\n      {...rootProps}\n      {...restProps}\n    >\n      <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n      <div className={selectBoxClassNames.content}>\n        <span className={selectBoxClassNames.label}>{label}</span>\n        {description && (\n          <span className={selectBoxClassNames.description}>{description}</span>\n        )}\n      </div>\n      <div\n        {...controlProps}\n        className={clsx(selectBoxClassNames.control, radioClassNames.root)}\n      >\n        <div {...stateProps} className={radioClassNames.icon} />\n      </div>\n    </label>\n  );\n});\nSelectBoxRadio.displayName = \"SelectBoxRadio\";\n\nexport const SelectBoxCheckGroup = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...otherProps }, ref) => {\n  const classNames = selectBox();\n\n  return (\n    <div ref={ref} {...otherProps} className={clsx(classNames.root, className)}>\n      {children}\n    </div>\n  );\n});\nSelectBoxCheckGroup.displayName = \"SelectBoxCheckGroup\";\n\nexport interface SelectBoxCheckProps\n  extends SelectBoxVariantProps,\n    Pick<CheckboxVariantProps, \"indeterminate\">,\n    Omit<UseCheckboxProps, \"disabled\" | \"invalid\"> {\n  label: string;\n  description?: string;\n}\n\nexport const SelectBoxCheck = React.forwardRef<\n  HTMLInputElement,\n  Assign<\n    Omit<React.InputHTMLAttributes<HTMLInputElement>, \"children\">,\n    SelectBoxCheckProps\n  >\n>(({ className, label, description, indeterminate, ...otherProps }, ref) => {\n  const { rootProps, restProps, hiddenInputProps, controlProps, stateProps } =\n    useCheckbox(otherProps);\n\n  const checkClassNames = checkbox({\n    size: \"large\",\n    variant: \"square\",\n    indeterminate,\n  });\n  const selectBoxClassNames = selectBox();\n\n  return (\n    <label\n      className={clsx(selectBoxClassNames.box, className)}\n      {...rootProps}\n      {...restProps}\n    >\n      <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n      <div className={selectBoxClassNames.content}>\n        <span className={selectBoxClassNames.label}>{label}</span>\n        {description && (\n          <span className={selectBoxClassNames.description}>{description}</span>\n        )}\n      </div>\n      <div\n        {...controlProps}\n        className={clsx(selectBoxClassNames.control, checkClassNames.control)}\n      >\n        {!indeterminate ? (\n          <IconCheckmarkFatFill\n            aria-hidden\n            {...stateProps}\n            className={checkClassNames.icon}\n          />\n        ) : (\n          <IconMinusFatFill\n            aria-hidden\n            {...stateProps}\n            className={checkClassNames.icon}\n          />\n        )}\n      </div>\n    </label>\n  );\n});\nSelectBoxCheck.displayName = \"SelectBoxCheck\";\n"
    }
  ]
}
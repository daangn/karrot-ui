{
  "name": "toggle-button",
  "dependencies": [
    "@radix-ui/react-slot",
    "@seed-design/react-toggle"
  ],
  "registries": [
    {
      "name": "toggle-button.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/progressCircle.css\";\nimport \"@seed-design/stylesheet/toggleButton.css\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { useToggle, type UseToggleProps } from \"@seed-design/react-toggle\";\nimport {\n  toggleButton,\n  type ToggleButtonVariantProps,\n} from \"@seed-design/recipe/toggleButton\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport { ProgressCircle } from \"./progress-circle\";\n\nexport interface ToggleButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    UseToggleProps,\n    ToggleButtonVariantProps {\n  prefixIcon?: React.ReactNode;\n\n  suffixIcon?: React.ReactNode;\n\n  loading?: boolean;\n\n  /**\n   * @default false\n   */\n  asChild?: boolean;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/toggle-button\n */\nexport const ToggleButton = React.forwardRef<\n  HTMLButtonElement,\n  ToggleButtonProps\n>(\n  (\n    {\n      className,\n      variant = \"brandSolid\",\n      size = \"small\",\n      children,\n      prefixIcon,\n      suffixIcon,\n      loading = false,\n      asChild = false,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { rootProps, stateProps, restProps } = useToggle(otherProps);\n    const classNames = toggleButton({ variant, size });\n    const dataProps = {\n      ...stateProps,\n      \"data-loading\": loading ? \"\" : undefined,\n    };\n\n    return (\n      <Comp\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...dataProps}\n        {...rootProps}\n        {...restProps}\n      >\n        {prefixIcon && (\n          <Slot aria-hidden {...dataProps} className={classNames.prefixIcon}>\n            {prefixIcon}\n          </Slot>\n        )}\n        <span {...dataProps} className={classNames.label}>\n          {children}\n        </span>\n        {suffixIcon && (\n          <Slot aria-hidden {...dataProps} className={classNames.suffixIcon}>\n            {suffixIcon}\n          </Slot>\n        )}\n        {loading ? (\n          <ProgressCircle\n            {...dataProps}\n            className={classNames.progressCircle}\n          />\n        ) : null}\n      </Comp>\n    );\n  },\n);\nToggleButton.displayName = \"ToggleButton\";\n"
    }
  ]
}
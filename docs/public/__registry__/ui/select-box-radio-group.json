{
  "name": "select-box-radio-group",
  "dependencies": [
    "@seed-design/react-radio-group"
  ],
  "registries": [
    {
      "name": "select-box-radio-group.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  useRadioGroup,\n  type UseRadioGroupProps,\n  type RadioItemProps,\n} from \"@seed-design/react-radio-group\";\nimport { radio } from \"@seed-design/recipe/radio\";\nimport {\n  type SelectBoxVariantProps,\n  selectBox,\n} from \"@seed-design/recipe/selectBox\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nimport \"@seed-design/stylesheet/radio.css\";\nimport \"@seed-design/stylesheet/selectBox.css\";\n\nconst SelectBoxRadioGroupContext = React.createContext<{\n  api: ReturnType<typeof useRadioGroup>;\n} | null>(null);\n\nconst useSelectBoxContext = () => {\n  const context = React.useContext(SelectBoxRadioGroupContext);\n  if (!context)\n    throw new Error(\n      \"SelectBoxRadio cannot be rendered outside the SelectBoxRadioGroup\",\n    );\n\n  return context;\n};\n\nexport interface SelectBoxRadioGroupProps\n  extends Omit<UseRadioGroupProps, \"disabled\"> {}\n\ntype ReactSelectBoxRadioGroupProps = Assign<\n  React.HTMLAttributes<HTMLDivElement>,\n  SelectBoxRadioGroupProps\n>;\n\nexport const SelectBoxRadioGroup = React.forwardRef<\n  HTMLDivElement,\n  ReactSelectBoxRadioGroupProps\n>(({ className, children, ...otherProps }, ref) => {\n  const api = useRadioGroup(otherProps);\n  const {\n    rootProps: { \"aria-labelledby\": _, ...rootProps },\n    restProps,\n  } = api;\n\n  return (\n    <div ref={ref} {...rootProps} {...restProps} className={className}>\n      {/* <div {...labelProps}>\n        {label}\n      </div> */}\n      <SelectBoxRadioGroupContext.Provider value={{ api }}>\n        {children}\n      </SelectBoxRadioGroupContext.Provider>\n    </div>\n  );\n});\nSelectBoxRadioGroup.displayName = \"SelectBoxRadioGroup\";\n\nexport interface SelectBoxRadioProps\n  extends SelectBoxVariantProps,\n    Omit<RadioItemProps, \"disabled\" | \"invalid\"> {\n  label: string;\n  description?: string;\n}\n\ntype ReactSelectBoxRadio = Assign<\n  Omit<React.HTMLAttributes<HTMLInputElement>, \"children\">,\n  SelectBoxRadioProps\n>;\n\nexport const SelectBoxRadio = React.forwardRef<\n  HTMLInputElement,\n  ReactSelectBoxRadio\n>(({ className, label, description, ...otherProps }, ref) => {\n  const { api } = useSelectBoxContext();\n  const { getItemProps } = api;\n  const { rootProps, restProps, hiddenInputProps, controlProps, stateProps } =\n    getItemProps(otherProps);\n\n  const radioClassNames = radio({ size: \"large\" });\n  const selectBoxClassNames = selectBox();\n\n  return (\n    <label\n      className={clsx(selectBoxClassNames.root, className)}\n      {...rootProps}\n      {...restProps}\n    >\n      <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n      <div className={selectBoxClassNames.content}>\n        <div className={selectBoxClassNames.label}>{label}</div>\n        {description && (\n          <div className={selectBoxClassNames.description}>{description}</div>\n        )}\n      </div>\n      <div\n        {...controlProps}\n        className={clsx(selectBoxClassNames.control, radioClassNames.root)}\n      >\n        <div {...stateProps} className={radioClassNames.icon} />\n      </div>\n    </label>\n  );\n});\nSelectBoxRadio.displayName = \"SelectBoxRadio\";\n"
    }
  ]
}
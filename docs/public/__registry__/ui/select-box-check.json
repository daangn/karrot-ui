{
  "name": "select-box-check",
  "dependencies": [
    "@seed-design/react-checkbox",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "select-box-check.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  type UseCheckboxProps,\n  useCheckbox,\n} from \"@seed-design/react-checkbox\";\nimport {\n  checkbox,\n  type CheckboxVariantProps,\n} from \"@seed-design/recipe/checkbox\";\nimport {\n  type SelectBoxVariantProps,\n  selectBox,\n} from \"@seed-design/recipe/selectBox\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nimport \"@seed-design/stylesheet/checkbox.css\";\nimport \"@seed-design/stylesheet/selectBox.css\";\nimport {\n  IconCheckmarkFatFill,\n  IconMinusFatFill,\n} from \"@daangn/react-monochrome-icon\";\n\nexport interface SelectBoxCheckProps\n  extends SelectBoxVariantProps,\n    Pick<CheckboxVariantProps, \"indeterminate\">,\n    Omit<UseCheckboxProps, \"disabled\" | \"invalid\"> {\n  label: string;\n  description?: string;\n}\n\ntype ReactSelectBoxCheck = Assign<\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, \"children\">,\n  SelectBoxCheckProps\n>;\n\nexport const SelectBoxCheck = React.forwardRef<\n  HTMLInputElement,\n  ReactSelectBoxCheck\n>(({ className, label, description, indeterminate, ...otherProps }, ref) => {\n  const { rootProps, restProps, hiddenInputProps, controlProps, stateProps } =\n    useCheckbox(otherProps);\n\n  const checkClassNames = checkbox({\n    size: \"large\",\n    variant: \"square\",\n    indeterminate,\n  });\n  const selectBoxClassNames = selectBox();\n\n  return (\n    <label\n      className={clsx(selectBoxClassNames.root, className)}\n      {...rootProps}\n      {...restProps}\n    >\n      <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n      <div className={selectBoxClassNames.content}>\n        <span className={selectBoxClassNames.label}>{label}</span>\n        {description && (\n          <span className={selectBoxClassNames.description}>{description}</span>\n        )}\n      </div>\n      <div\n        {...controlProps}\n        className={clsx(selectBoxClassNames.control, checkClassNames.control)}\n      >\n        {!indeterminate ? (\n          <IconCheckmarkFatFill\n            aria-hidden\n            {...stateProps}\n            className={checkClassNames.icon}\n          />\n        ) : (\n          <IconMinusFatFill\n            aria-hidden\n            {...stateProps}\n            className={checkClassNames.icon}\n          />\n        )}\n      </div>\n    </label>\n  );\n});\nSelectBoxCheck.displayName = \"SelectBoxCheck\";\n"
    }
  ]
}
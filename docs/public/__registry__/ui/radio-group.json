{
  "name": "radio-group",
  "dependencies": [
    "@seed-design/react-radio-group@alpha"
  ],
  "registries": [
    {
      "name": "radio-group.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport {\n  type RadioItemProps,\n  type UseRadioGroupProps,\n  useRadioGroup,\n} from \"@seed-design/react-radio-group\";\nimport {\n  type RadioGroupVariantProps,\n  radioGroup,\n} from \"@seed-design/recipe/radioGroup\";\nimport { radioControl } from \"@seed-design/recipe/radioControl\";\nimport { type RadioVariantProps, radio } from \"@seed-design/recipe/radio\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nimport type { Assign } from \"../util/types\";\nimport { visuallyHidden } from \"../util/visuallyHidden\";\n\nimport \"@seed-design/stylesheet/radioControl.css\";\nimport \"@seed-design/stylesheet/radio.css\";\nimport \"@seed-design/stylesheet/radioGroup.css\";\n\nconst RadioContext = React.createContext<{\n  api: ReturnType<typeof useRadioGroup>;\n  /**\n   * @default \"medium\"\n   */\n  size: RadioVariantProps[\"size\"];\n  /**\n   * @default \"regular\"\n   */\n  fontWeight: RadioVariantProps[\"fontWeight\"];\n  /**\n   * @default \"vertical\"\n   */\n  orientation: RadioGroupVariantProps[\"orientation\"];\n} | null>(null);\n\nconst useRadioContext = () => {\n  const context = React.useContext(RadioContext);\n  if (!context)\n    throw new Error(\"Radio cannot be rendered outside the RadioGroup\");\n\n  return context;\n};\n\nexport interface RadioGroupProps\n  extends RadioGroupVariantProps,\n    UseRadioGroupProps,\n    RadioVariantProps {\n  label?: string;\n}\n\ntype ReactRadioGroupProps = RadioGroupProps &\n  Assign<React.HTMLAttributes<HTMLFieldSetElement>, UseRadioGroupProps>;\n\nexport const RadioGroup = React.forwardRef<\n  HTMLFieldSetElement,\n  ReactRadioGroupProps\n>(\n  (\n    {\n      className,\n      orientation = \"vertical\",\n      size = \"medium\",\n      fontWeight = \"regular\",\n      label,\n      children,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const api = useRadioGroup(otherProps);\n    const {\n      rootProps,\n      labelProps: { className: labelClassName, ...restLabelProps },\n    } = api;\n\n    const classNames = radioGroup({ orientation });\n\n    return (\n      <fieldset\n        ref={ref}\n        {...rootProps}\n        className={clsx(classNames.root, className)}\n      >\n        {label && (\n          <legend\n            className={clsx(classNames.label, labelClassName)}\n            {...restLabelProps}\n          >\n            {label}\n          </legend>\n        )}\n        <div className={classNames.radios}>\n          <RadioContext.Provider value={{ api, size, fontWeight, orientation }}>\n            {children}\n          </RadioContext.Provider>\n        </div>\n      </fieldset>\n    );\n  },\n);\nRadioGroup.displayName = \"RadioGroup\";\n\nexport interface RadioProps extends RadioVariantProps {}\n\ntype ReactRadioProps = RadioProps &\n  Assign<React.HTMLAttributes<HTMLInputElement>, RadioItemProps>;\n\nexport const Radio = React.forwardRef<HTMLInputElement, ReactRadioProps>(\n  ({ className, size, fontWeight, children, ...otherProps }, ref) => {\n    const { api, size: ctxSize, fontWeight: ctxFontWeight } = useRadioContext();\n    const { getItemProps } = api;\n    const { stateProps, restProps, controlProps, hiddenInputProps, rootProps } =\n      getItemProps(otherProps);\n\n    const classNames = radio({\n      size: size ?? ctxSize,\n      fontWeight: fontWeight ?? ctxFontWeight,\n    });\n    const controlClassNames = radioControl({ size: size ?? ctxSize });\n\n    return (\n      <label\n        className={clsx(classNames.root, className)}\n        {...rootProps}\n        {...restProps}\n      >\n        <div\n          {...controlProps}\n          className={clsx(classNames.control, controlClassNames.root)}\n        >\n          <div {...stateProps} className={controlClassNames.icon} />\n        </div>\n        <input ref={ref} {...hiddenInputProps} style={visuallyHidden} />\n        <span {...stateProps} className={classNames.label}>\n          {children}\n        </span>\n      </label>\n    );\n  },\n);\nRadio.displayName = \"Radio\";\n"
    }
  ]
}
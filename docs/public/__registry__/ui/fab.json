{
  "name": "fab",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "fab.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/fab.css\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { fab, type FabVariantProps } from \"@seed-design/recipe/fab\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nexport interface FabProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    FabVariantProps {\n  /**\n   * @default false\n   */\n  asChild?: boolean;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/fab\n */\nexport const Fab = React.forwardRef<HTMLButtonElement, FabProps>(\n  (\n    { className, size = \"medium\", children, asChild = false, ...otherProps },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const classNames = fab({ size });\n    const dataProps = {\n      \"data-disabled\": otherProps.disabled ? \"\" : undefined,\n    };\n\n    if (!(otherProps[\"aria-label\"] || otherProps[\"aria-labelledby\"])) {\n      console.warn(\n        \"When layout is 'iconOnly', 'aria-label' or 'aria-labelledby' should be provided.\",\n      );\n    }\n\n    return (\n      <Comp\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...dataProps}\n        {...otherProps}\n      >\n        (\n        <Slot aria-hidden {...dataProps} className={classNames.icon}>\n          {children}\n        </Slot>\n        )\n      </Comp>\n    );\n  },\n);\nFab.displayName = \"Fab\";\n"
    }
  ]
}
{
  "name": "actionable-inline-banner",
  "dependencies": [
    "@daangn/react-monochrome-icon",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "actionable-inline-banner.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  inlineBanner,\n  type InlineBannerVariantProps,\n} from \"@seed-design/recipe/inlineBanner\";\nimport { IconChevronRightLine } from \"@daangn/react-monochrome-icon\";\n\nconst ActionableInlineBannerContext = React.createContext<{\n  variantProps: InlineBannerVariantProps;\n} | null>(null);\n\nconst useActionableInlineBannerContext = () => {\n  const context = React.useContext(ActionableInlineBannerContext);\n  if (!context)\n    throw new Error(\n      \"Parts of ActionableInlineBanner cannot be rendered outside the ActionableInlineBanner\",\n    );\n\n  return context;\n};\n\nexport const ActionableInlineBannerTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useActionableInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nActionableInlineBannerTitle.displayName = \"ActionableInlineBannerTitle\";\n\nexport const ActionableInlineBannerDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useActionableInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nActionableInlineBannerDescription.displayName =\n  \"ActionableInlineBannerDescription\";\n\nexport interface ActionableInlineBannerProps extends InlineBannerVariantProps {\n  icon?: React.ReactNode;\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n}\n\ntype ReactActionableInlineBannerProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n> &\n  ActionableInlineBannerProps;\n\nexport const ActionableInlineBanner = React.forwardRef<\n  HTMLButtonElement,\n  ReactActionableInlineBannerProps\n>(\n  (\n    {\n      children,\n      className,\n      type = \"button\",\n      variant = \"neutralWeak\",\n      icon,\n      onClick,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = inlineBanner({ variant });\n    return (\n      <button\n        onClick={onClick}\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        type={type}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          {icon && <Slot className={classNames.icon}>{icon}</Slot>}\n          <div>\n            <ActionableInlineBannerContext.Provider\n              value={{ variantProps: { variant } }}\n            >\n              {children}\n            </ActionableInlineBannerContext.Provider>\n          </div>\n        </div>\n        <IconChevronRightLine className={classNames.actionableIcon} />\n      </button>\n    );\n  },\n);\nActionableInlineBanner.displayName = \"ActionableInlineBanner\";\n"
    }
  ]
}
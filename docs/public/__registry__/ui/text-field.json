{
  "name": "text-field",
  "dependencies": [
    "@seed-design/react-text-field",
    "@daangn/react-monochrome-icon",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "text-field.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/textField.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  textField,\n  type TextFieldVariantProps,\n} from \"@seed-design/recipe/textField\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport {\n  useTextField,\n  type UseTextFieldProps,\n} from \"@seed-design/react-text-field\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport type { Assign } from \"../util/types\";\n\nexport interface TextFieldProps\n  extends UseTextFieldProps,\n    TextFieldVariantProps {\n  requiredIndicator?: string;\n  optionalIndicator?: string;\n\n  // XXX: 둘 다 받지는 못하면 좋을 것 같음\n  prefix?: string;\n  prefixIcon?: React.ReactNode;\n\n  // XXX: 둘 다 받지는 못하면 좋을 것 같음\n  suffix?: string;\n  suffixIcon?: React.ReactNode;\n\n  hideGraphemeCount?: boolean;\n}\n\ntype ReactTextFieldProps = Assign<\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, \"children\">,\n  TextFieldProps\n>;\n\nexport const TextField = React.forwardRef<\n  HTMLInputElement,\n  ReactTextFieldProps\n>(\n  (\n    {\n      size = \"medium\",\n      requiredIndicator,\n      optionalIndicator,\n      prefix,\n      prefixIcon,\n      suffix,\n      suffixIcon,\n      hideGraphemeCount,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const {\n      rootProps: { className: rootClassName, ...rootProps },\n      inputProps: { className: inputClassName, ...inputProps },\n      labelProps: { className: labelClassName, ...labelProps },\n      descriptionProps,\n      errorMessageProps,\n      renderDescription,\n      renderErrorMessage,\n      stateProps,\n      restProps,\n      isRequired,\n      graphemes,\n    } = useTextField(otherProps);\n\n    const { label, description, errorMessage, maxGraphemeCount } = otherProps;\n\n    const classNames = textField({ size });\n\n    const indicator = isRequired ? requiredIndicator : optionalIndicator;\n\n    const renderGraphemeCount = !hideGraphemeCount && maxGraphemeCount;\n\n    return (\n      <div\n        className={clsx(classNames.root, rootClassName)}\n        {...rootProps}\n        {...stateProps}\n      >\n        {label && (\n          // XXX\n          // biome-ignore lint/a11y/noLabelWithoutControl: <explanation>\n          <label {...labelProps} className={classNames.header}>\n            <span className={clsx(classNames.label, labelClassName)}>\n              {label}\n            </span>\n            {indicator && (\n              <span className={classNames.indicator}>{indicator}</span>\n            )}\n          </label>\n        )}\n        <div {...stateProps} className={clsx(classNames.input)}>\n          {prefix && <div className={classNames.prefixText}>{prefix}</div>}\n          {prefixIcon && (\n            <Slot {...stateProps} className={clsx(classNames.prefixIcon)}>\n              {prefixIcon}\n            </Slot>\n          )}\n          <input\n            ref={ref}\n            className={clsx(classNames.inputText, inputClassName)}\n            {...inputProps}\n            {...restProps}\n          />\n          {suffix && <div className={classNames.suffixText}>{suffix}</div>}\n          {suffixIcon && (\n            <Slot {...stateProps} className={clsx(classNames.suffixIcon)}>\n              {suffixIcon}\n            </Slot>\n          )}\n        </div>\n        {(renderDescription || renderErrorMessage || renderGraphemeCount) && (\n          <div className={classNames.footer}>\n            {renderDescription && (\n              <div {...descriptionProps} className={classNames.description}>\n                {description}\n              </div>\n            )}\n            {renderErrorMessage && (\n              <div {...errorMessageProps} className={classNames.errorMessage}>\n                <IconExclamationmarkCircleFill\n                  className={classNames.errorIcon}\n                />\n                <div>{errorMessage}</div>\n              </div>\n            )}\n            {renderGraphemeCount && (\n              <div className={classNames.characterCount}>\n                <span\n                  {...stateProps}\n                  className={classNames.currentCharacterCount}\n                >\n                  {graphemes.length}\n                </span>\n                <span className={classNames.maxCharacterCount}>\n                  /{maxGraphemeCount}\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nTextField.displayName = \"TextField\";\n"
    }
  ]
}
{
  "name": "text-field",
  "dependencies": [
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "text-field.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/textField.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport {\n  textField,\n  type TextFieldVariantProps,\n} from \"@seed-design/recipe/textField\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport {\n  useTextField,\n  type UseTextFieldProps,\n} from \"@seed-design/react-text-field\";\n\nexport interface TextFieldProps\n  extends UseTextFieldProps,\n    TextFieldVariantProps {\n  requiredIndicator?: string;\n  optionalIndicator?: string;\n\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n\n  hideCharacterCount?: boolean;\n}\n\ntype ReactTextFieldProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  \"children\" | \"size\" | \"prefix\" | \"suffix\"\n> &\n  TextFieldProps;\n\nexport const TextField = React.forwardRef<\n  HTMLInputElement,\n  ReactTextFieldProps\n>((props, ref) => {\n  const {\n    rootProps: { className: rootClassName, ...rootProps },\n    inputProps: { className: inputClassName, ...inputProps },\n    labelProps: { className: labelClassName, ...labelProps },\n    descriptionProps,\n    errorMessageProps,\n    stateProps,\n    restProps,\n    isInvalid,\n    isRequired,\n    graphemes,\n  } = useTextField(props);\n\n  const {\n    size = \"medium\",\n    label,\n    requiredIndicator,\n    optionalIndicator,\n    errorMessage,\n    description,\n    hideCharacterCount,\n    maxLength,\n  } = props;\n\n  const classNames = textField({ size });\n\n  const indicator = isRequired ? requiredIndicator : optionalIndicator;\n  const renderDescription = !isInvalid && description;\n  const renderErrorMessage = isInvalid && !!errorMessage;\n  const renderCharacterCount = !hideCharacterCount && maxLength;\n\n  return (\n    <div\n      className={clsx(classNames.root, rootClassName)}\n      {...rootProps}\n      {...stateProps}\n    >\n      {label && (\n        // biome-ignore lint/a11y/noLabelWithoutControl: <explanation>\n        <label {...labelProps} className={classNames.header}>\n          <span className={clsx(classNames.label, labelClassName)}>\n            {label}\n          </span>\n          {indicator && (\n            <span className={classNames.indicator}>{indicator}</span>\n          )}\n        </label>\n      )}\n      <div className={classNames.content}>\n        <input\n          ref={ref}\n          className={clsx(classNames.input, inputClassName)}\n          {...inputProps}\n          {...restProps}\n        />\n        {(renderDescription || renderErrorMessage || renderCharacterCount) && (\n          <div>\n            {renderDescription && (\n              <div {...descriptionProps} className={classNames.description}>\n                {description}\n              </div>\n            )}\n            {renderErrorMessage && (\n              <div\n                {...stateProps}\n                {...errorMessageProps}\n                className={classNames.description}\n              >\n                <IconExclamationmarkCircleFill\n                  className={classNames.errorIcon}\n                />\n                <div>{errorMessage}</div>\n              </div>\n            )}\n            {renderCharacterCount && (\n              <div {...stateProps}>\n                <span>{graphemes.length}</span>\n                <span>/{maxLength}</span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\nTextField.displayName = \"TextField\";\n"
    }
  ]
}
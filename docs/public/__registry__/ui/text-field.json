{
  "name": "text-field",
  "dependencies": [
    "@seed-design/react",
    "@daangn/react-monochrome-icon",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "text-field.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { IconExclamationmarkCircleFill } from \"@daangn/react-monochrome-icon\";\nimport { TextField as SeedTextField } from \"@seed-design/react\";\n\nexport interface TextFieldProps\n  extends Omit<SeedTextField.RootProps, \"prefix\"> {\n  label?: React.ReactNode;\n\n  indicator?: React.ReactNode;\n\n  prefixIcon?: React.ReactNode;\n\n  prefix?: React.ReactNode;\n\n  suffixIcon?: React.ReactNode;\n\n  suffix?: React.ReactNode;\n\n  description?: React.ReactNode;\n\n  errorMessage?: React.ReactNode;\n\n  hideCharacterCount?: boolean;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/text-fields/text-field\n */\nexport const TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    {\n      description,\n      errorMessage,\n      prefix,\n      prefixIcon,\n      suffix,\n      suffixIcon,\n      indicator,\n      label,\n      children,\n      hideCharacterCount,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const renderCharacterCount =\n      !hideCharacterCount && otherProps.maxGraphemeCount;\n    const renderDescription = description && !otherProps.invalid;\n    const renderErrorMessage = errorMessage && otherProps.invalid;\n    const renderFooter =\n      renderDescription || renderErrorMessage || renderCharacterCount;\n    const renderHeader = label || indicator;\n\n    return (\n      <SeedTextField.Root ref={ref} {...otherProps}>\n        {renderHeader && (\n          <SeedTextField.Header>\n            <SeedTextField.Label>{label}</SeedTextField.Label>\n            <SeedTextField.Indicator>{indicator}</SeedTextField.Indicator>\n          </SeedTextField.Header>\n        )}\n        <SeedTextField.Field>\n          {prefixIcon && <SeedTextField.PrefixIcon svg={prefixIcon} />}\n          {prefix && (\n            <SeedTextField.PrefixText>{prefix}</SeedTextField.PrefixText>\n          )}\n          {children}\n          {suffix && (\n            <SeedTextField.SuffixText>{suffix}</SeedTextField.SuffixText>\n          )}\n          {suffixIcon && <SeedTextField.SuffixIcon svg={suffixIcon} />}\n        </SeedTextField.Field>\n        {renderFooter && (\n          <SeedTextField.Footer>\n            {renderDescription && (\n              <SeedTextField.Description>\n                {description}\n              </SeedTextField.Description>\n            )}\n            {renderErrorMessage && (\n              <SeedTextField.ErrorMessage>\n                <SeedTextField.ErrorIcon\n                  svg={<IconExclamationmarkCircleFill />}\n                />\n                {errorMessage}\n              </SeedTextField.ErrorMessage>\n            )}\n            {renderCharacterCount && (\n              <SeedTextField.CharacterCountArea>\n                <SeedTextField.CharacterCount />\n                <SeedTextField.MaxCharacterCount>\n                  /{otherProps.maxGraphemeCount}\n                </SeedTextField.MaxCharacterCount>\n              </SeedTextField.CharacterCountArea>\n            )}\n          </SeedTextField.Footer>\n        )}\n      </SeedTextField.Root>\n    );\n  },\n);\nTextField.displayName = \"TextField\";\n\nexport interface TextFieldInputProps extends SeedTextField.InputProps {}\n\nexport const TextFieldInput = SeedTextField.Input;\n\nexport interface TextFieldTextareaProps extends SeedTextField.TextareaProps {}\n\nexport const TextFieldTextarea = SeedTextField.Textarea;\n"
    }
  ]
}
{
  "name": "help-bubble",
  "dependencies": [
    "@seed-design/react-popover@0.0.0-alpha-20241030023710",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "help-bubble.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/helpBubble.css\";\n\nimport IconXmarkLine from \"@daangn/react-monochrome-icon/IconXmarkLine\";\nimport { HelpBubble as SeedHelpBubble } from \"@seed-design/react\";\nimport { forwardRef } from \"react\";\n\nexport interface HelpBubbleTriggerProps\n  extends Omit<SeedHelpBubble.RootProps, \"children\"> {\n  title: string;\n\n  description?: string;\n\n  showCloseButton?: boolean;\n\n  children?: React.ReactNode;\n\n  contentProps?: SeedHelpBubble.ContentProps;\n}\n\nexport const HelpBubbleTrigger = forwardRef<\n  HTMLButtonElement,\n  HelpBubbleTriggerProps\n>((props, ref) => {\n  const {\n    showCloseButton = false,\n    title,\n    description,\n    contentProps,\n    children,\n    ...otherProps\n  } = props;\n\n  return (\n    <SeedHelpBubble.Root {...otherProps}>\n      <SeedHelpBubble.Trigger asChild ref={ref}>\n        {children}\n      </SeedHelpBubble.Trigger>\n      <SeedHelpBubble.Positioner>\n        <SeedHelpBubble.Content {...contentProps}>\n          {showCloseButton ? (\n            <SeedHelpBubble.CloseButton>\n              <SeedHelpBubble.CloseIcon svg={<IconXmarkLine />} />\n            </SeedHelpBubble.CloseButton>\n          ) : null}\n          <SeedHelpBubble.Arrow>\n            <SeedHelpBubble.ArrowTip />\n          </SeedHelpBubble.Arrow>\n          <SeedHelpBubble.Title>{props.title}</SeedHelpBubble.Title>\n          {props.description && (\n            <SeedHelpBubble.Description>\n              {props.description}\n            </SeedHelpBubble.Description>\n          )}\n        </SeedHelpBubble.Content>\n      </SeedHelpBubble.Positioner>\n    </SeedHelpBubble.Root>\n  );\n});\n\nexport interface HelpBubbleAnchorProps\n  extends Omit<SeedHelpBubble.RootProps, \"children\"> {\n  title: string;\n\n  description?: string;\n\n  showCloseButton?: boolean;\n\n  children?: React.ReactNode;\n}\n\nexport const HelpBubbleAnchor = forwardRef<\n  HTMLDivElement,\n  HelpBubbleAnchorProps\n>((props, ref) => {\n  const {\n    open,\n    defaultOpen,\n    onOpenChange,\n    showCloseButton = false,\n    title,\n    description,\n    ...otherProps\n  } = props;\n\n  return (\n    <SeedHelpBubble.Root>\n      <SeedHelpBubble.Anchor asChild ref={ref} {...otherProps} />\n      <SeedHelpBubble.Positioner>\n        <SeedHelpBubble.Content>\n          {showCloseButton ? (\n            <SeedHelpBubble.CloseButton>\n              <SeedHelpBubble.CloseIcon svg={<IconXmarkLine />} />\n            </SeedHelpBubble.CloseButton>\n          ) : null}\n          <SeedHelpBubble.Arrow>\n            <SeedHelpBubble.ArrowTip />\n          </SeedHelpBubble.Arrow>\n          <SeedHelpBubble.Title>{props.title}</SeedHelpBubble.Title>\n          {props.description && (\n            <SeedHelpBubble.Description>\n              {props.description}\n            </SeedHelpBubble.Description>\n          )}\n        </SeedHelpBubble.Content>\n      </SeedHelpBubble.Positioner>\n    </SeedHelpBubble.Root>\n  );\n});\n"
    }
  ]
}
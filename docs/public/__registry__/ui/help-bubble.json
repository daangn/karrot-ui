{
  "name": "help-bubble",
  "dependencies": [
    "@seed-design/react-popover@0.0.0-alpha-20241030023710",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "help-bubble.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/helpBubble.css\";\n\nimport IconXmarkLine from \"@daangn/react-monochrome-icon/IconXmarkLine\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { usePopover, type UsePopoverProps } from \"@seed-design/react-popover\";\nimport { helpBubble } from \"@seed-design/recipe/helpBubble\";\nimport { createContext, forwardRef, useContext } from \"react\";\nimport { mergeRefs } from \"../util/mergeRefs\";\n\ninterface HelpBubbleArrowProps extends React.ComponentPropsWithRef<\"svg\"> {\n  width: number;\n\n  height: number;\n\n  tipRadius: number;\n}\n\nconst HelpBubbleArrow = forwardRef<SVGSVGElement, HelpBubbleArrowProps>(\n  (props, ref) => {\n    const { width, height, tipRadius, ...otherProps } = props;\n    const pathData = `M0,0\n    H${width}\n    L${width / 2 + tipRadius},${height - tipRadius}\n    Q${width / 2},${height} ${width / 2 - tipRadius},${height - tipRadius}\n    Z`;\n\n    return (\n      <svg\n        aria-hidden=\"true\"\n        width={width}\n        height={width}\n        viewBox={`0 0 ${width} ${height > width ? height : width}`}\n        ref={ref}\n        {...otherProps}\n      >\n        <path stroke=\"none\" d={pathData} />\n      </svg>\n    );\n  },\n);\n\nconst HelpBubbleContext = createContext<{\n  api: ReturnType<typeof usePopover>;\n} | null>(null);\n\nexport interface HelpBubbleTriggerProps extends UsePopoverProps {\n  title: string;\n\n  description?: string;\n\n  showCloseButton?: boolean;\n\n  children?: React.ReactNode;\n}\n\nexport const HelpBubbleTrigger = forwardRef<\n  HTMLButtonElement,\n  HelpBubbleTriggerProps\n>((props, ref) => {\n  const {\n    open,\n    defaultOpen,\n    onOpenChange,\n    placement = \"top\",\n    gutter = 4,\n    overflowPadding = 16,\n    arrowPadding = 14,\n    flip = true,\n    slide = true,\n    strategy = \"absolute\",\n    showCloseButton = false,\n    title,\n    description,\n    ...otherProps\n  } = props;\n\n  const api = usePopover({\n    open,\n    defaultOpen,\n    onOpenChange,\n    placement,\n    gutter,\n    overflowPadding,\n    arrowPadding,\n    flip,\n    slide,\n    strategy,\n  });\n  const classNames = helpBubble();\n\n  const arrowRect = api.rects.arrow;\n\n  return (\n    <>\n      <Slot\n        ref={mergeRefs(ref, api.refs.trigger)}\n        {...api.triggerProps}\n        {...otherProps}\n      />\n      {api.open && (\n        <div\n          ref={api.refs.positioner}\n          {...api.positionerProps}\n          className={classNames.positioner}\n        >\n          {showCloseButton ? (\n            <button\n              type=\"button\"\n              className={classNames.closeButton}\n              {...api.closeButtonProps}\n            >\n              <IconXmarkLine className={classNames.closeIcon} />\n            </button>\n          ) : null}\n          <div className={classNames.content}>\n            <div\n              ref={api.refs.arrow}\n              {...api.arrowProps}\n              className={classNames.arrow}\n            >\n              <HelpBubbleArrow\n                width={arrowRect?.width ?? 0}\n                height={arrowRect?.height ?? 0}\n                tipRadius={1}\n              />\n            </div>\n            <span className={classNames.title}>{props.title}</span>\n            {props.description && (\n              <span className={classNames.description}>\n                {props.description}\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n});\n"
    }
  ]
}
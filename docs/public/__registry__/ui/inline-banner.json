{
  "name": "inline-banner",
  "dependencies": [
    "@seed-design/react",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "inline-banner.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport {\n  InlineBanner as SeedInlineBanner,\n  DismissibleProvider,\n  useDismissible,\n  type UseDismissibleProps,\n} from \"@seed-design/react\";\nimport * as React from \"react\";\n\nimport {\n  IconChevronRightLine,\n  IconXmarkLine,\n} from \"@daangn/react-monochrome-icon\";\n\nexport interface InlineBannerProps\n  extends Omit<SeedInlineBanner.RootProps, \"children\" | \"title\" | \"asChild\"> {\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  description: React.ReactNode;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/inline-banner\n */\nexport const InlineBanner = React.forwardRef<\n  React.ElementRef<typeof SeedInlineBanner.Root>,\n  InlineBannerProps\n>(({ icon, title, description, ...otherProps }, ref) => {\n  return (\n    <SeedInlineBanner.Root ref={ref} {...otherProps}>\n      <SeedInlineBanner.Content>\n        {icon && <SeedInlineBanner.Icon svg={icon} />}\n        <SeedInlineBanner.TextContent>\n          {title && <SeedInlineBanner.Title>{title}</SeedInlineBanner.Title>}\n          <SeedInlineBanner.Description>\n            {description}\n          </SeedInlineBanner.Description>\n        </SeedInlineBanner.TextContent>\n      </SeedInlineBanner.Content>\n    </SeedInlineBanner.Root>\n  );\n});\nInlineBanner.displayName = \"InlineBanner\";\n\nexport interface LinkInlineBannerProps\n  extends Omit<SeedInlineBanner.RootProps, \"children\" | \"title\" | \"asChild\"> {\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  description: React.ReactNode;\n  linkLabel: React.ReactNode;\n  linkProps?: SeedInlineBanner.LinkProps;\n}\n\nexport const LinkInlineBanner = React.forwardRef<\n  React.ElementRef<typeof SeedInlineBanner.Root>,\n  LinkInlineBannerProps\n>(({ icon, title, description, linkLabel, linkProps, ...otherProps }, ref) => {\n  return (\n    <SeedInlineBanner.Root ref={ref} {...otherProps}>\n      <SeedInlineBanner.Content>\n        {icon && <SeedInlineBanner.Icon svg={icon} />}\n        <SeedInlineBanner.TextContent>\n          {title && <SeedInlineBanner.Title>{title}</SeedInlineBanner.Title>}\n          <SeedInlineBanner.Description>\n            {description}\n          </SeedInlineBanner.Description>\n        </SeedInlineBanner.TextContent>\n      </SeedInlineBanner.Content>\n      <SeedInlineBanner.Link {...linkProps}>{linkLabel}</SeedInlineBanner.Link>\n    </SeedInlineBanner.Root>\n  );\n});\nLinkInlineBanner.displayName = \"LinkInlineBanner\";\n\nexport interface ActionableInlineBannerProps\n  extends Omit<SeedInlineBanner.RootProps, \"children\" | \"title\" | \"asChild\"> {\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  description: React.ReactNode;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/inline-banner\n */\nexport const ActionableInlineBanner = React.forwardRef<\n  React.ElementRef<typeof SeedInlineBanner.Root>,\n  ActionableInlineBannerProps\n>(({ icon, title, description, ...otherProps }, ref) => {\n  return (\n    <SeedInlineBanner.Root ref={ref} {...otherProps} asChild>\n      <button type=\"button\">\n        <SeedInlineBanner.Content>\n          {icon && <SeedInlineBanner.Icon svg={icon} />}\n          <SeedInlineBanner.TextContent>\n            {title && <SeedInlineBanner.Title>{title}</SeedInlineBanner.Title>}\n            <SeedInlineBanner.Description>\n              {description}\n            </SeedInlineBanner.Description>\n          </SeedInlineBanner.TextContent>\n        </SeedInlineBanner.Content>\n        <SeedInlineBanner.ActionableIcon svg={<IconChevronRightLine />} />\n      </button>\n    </SeedInlineBanner.Root>\n  );\n});\nActionableInlineBanner.displayName = \"ActionableInlineBanner\";\n\nexport interface DismissibleInlineBannerProps\n  extends Omit<\n      SeedInlineBanner.RootProps,\n      \"variant\" | \"children\" | \"title\" | \"asChild\"\n    >,\n    UseDismissibleProps {\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  description: React.ReactNode;\n  variant?: Exclude<\n    SeedInlineBanner.RootProps[\"variant\"],\n    \"dangerWeak\" | \"dangerSolid\"\n  >;\n}\n\n/**\n * @see https://v3.seed-design.io/docs/react/components/inline-banner\n */\nexport const DismissibleInlineBanner = React.forwardRef<\n  React.ElementRef<typeof SeedInlineBanner.Root>,\n  DismissibleInlineBannerProps\n>(\n  (\n    { icon, title, description, defaultOpen, open, onDismiss, ...otherProps },\n    ref,\n  ) => {\n    const api = useDismissible({ defaultOpen, open, onDismiss });\n\n    if (!api.open) return null;\n\n    return (\n      <DismissibleProvider value={api}>\n        <SeedInlineBanner.Root ref={ref} {...otherProps}>\n          <SeedInlineBanner.Content>\n            {icon && <SeedInlineBanner.Icon svg={icon} />}\n            <SeedInlineBanner.TextContent>\n              {title && (\n                <SeedInlineBanner.Title>{title}</SeedInlineBanner.Title>\n              )}\n              <SeedInlineBanner.Description>\n                {description}\n              </SeedInlineBanner.Description>\n            </SeedInlineBanner.TextContent>\n          </SeedInlineBanner.Content>\n          {/* You may implement your own i18n for dismiss label */}\n          <SeedInlineBanner.DismissButton aria-label=\"닫기\">\n            <SeedInlineBanner.DismissIcon svg={<IconXmarkLine />} />\n          </SeedInlineBanner.DismissButton>\n        </SeedInlineBanner.Root>\n      </DismissibleProvider>\n    );\n  },\n);\nDismissibleInlineBanner.displayName = \"DismissibleInlineBanner\";\n"
    }
  ]
}
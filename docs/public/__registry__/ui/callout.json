{
  "name": "callout",
  "dependencies": [
    "@radix-ui/react-slot",
    "@seed-design/react-dismissible",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "callout.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/callout.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { callout, type CalloutVariantProps } from \"@seed-design/recipe/callout\";\nimport {\n  useDismissible,\n  type DismissibleProps,\n} from \"@seed-design/react-dismissible\";\nimport {\n  IconChevronRightFill,\n  IconXmarkFill,\n} from \"@daangn/react-monochrome-icon\";\n\nconst CalloutContext = React.createContext<{\n  variantProps: CalloutVariantProps;\n} | null>(null);\n\nconst useCalloutContext = () => {\n  const context = React.useContext(CalloutContext);\n  if (!context)\n    throw new Error(\"Parts of Callout cannot be rendered outside the Callout\");\n\n  return context;\n};\n\nexport const CalloutTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useCalloutContext();\n\n  const classNames = callout({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nCalloutTitle.displayName = \"CalloutTitle\";\n\nexport const CalloutDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useCalloutContext();\n  const classNames = callout({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nCalloutDescription.displayName = \"CalloutDescription\";\n\nexport const CalloutLink = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    /**\n     * @default false\n     */\n    asChild?: boolean;\n  }\n>(\n  (\n    { asChild = false, children, type = \"button\", className, ...otherProps },\n    ref,\n  ) => {\n    const {\n      variantProps: { variant },\n    } = useCalloutContext();\n    const classNames = callout({ variant });\n\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <>\n        <span\n          ref={ref}\n          className={clsx(classNames.spacer, className)}\n          {...otherProps}\n        >\n          {\" \"}\n        </span>\n        <Comp\n          type={type}\n          ref={ref}\n          className={clsx(classNames.linkLabel, className)}\n          {...otherProps}\n        >\n          {children}\n        </Comp>\n      </>\n    );\n  },\n);\nCalloutLink.displayName = \"CalloutLink\";\n\nexport interface CalloutProps extends Omit<CalloutVariantProps, \"type\"> {\n  icon?: React.ReactNode;\n}\n\nexport const Callout = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CalloutProps\n>(({ children, className, variant = \"neutral\", icon, ...otherProps }, ref) => {\n  const classNames = callout({ variant });\n\n  return (\n    <div ref={ref} className={clsx(classNames.root, className)} {...otherProps}>\n      <div className={classNames.content}>\n        {icon && <Slot className={classNames.icon}>{icon}</Slot>}\n        <div>\n          <CalloutContext.Provider value={{ variantProps: { variant } }}>\n            {children}\n          </CalloutContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n});\nCallout.displayName = \"Callout\";\n\nexport interface DismissibleCalloutProps\n  extends DismissibleProps,\n    CalloutVariantProps {\n  dismissAriaLabel: string;\n}\n\nexport const DismissibleCallout = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & DismissibleCalloutProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"neutral\",\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n      dismissAriaLabel,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = callout({ variant });\n\n    const { isOpen, onDismissButtonClick } = useDismissible({\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n    });\n\n    if (!isOpen) return null;\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          <div>\n            <CalloutContext.Provider value={{ variantProps: { variant } }}>\n              {children}\n            </CalloutContext.Provider>\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          aria-label={dismissAriaLabel}\n          className={classNames.dismissButton}\n          onClick={onDismissButtonClick}\n        >\n          <IconXmarkFill className={classNames.dismissIcon} />\n        </button>\n      </div>\n    );\n  },\n);\nDismissibleCallout.displayName = \"DismissibleCallout\";\n\nexport interface ActionableCalloutProps extends CalloutVariantProps {\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const ActionableCallout = React.forwardRef<\n  HTMLButtonElement,\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > &\n    ActionableCalloutProps\n>(\n  (\n    {\n      children,\n      className,\n      type = \"button\",\n      variant = \"neutral\",\n      onClick,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = callout({ variant });\n\n    return (\n      <button\n        onClick={onClick}\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        type={type}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          <div>\n            <CalloutContext.Provider value={{ variantProps: { variant } }}>\n              {children}\n            </CalloutContext.Provider>\n          </div>\n        </div>\n        <IconChevronRightFill className={classNames.actionableIcon} />\n      </button>\n    );\n  },\n);\nActionableCallout.displayName = \"ActionableCallout\";\n"
    }
  ]
}
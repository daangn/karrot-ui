{
  "name": "callout",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "callout.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/callout.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { callout, type CalloutVariantProps } from \"@seed-design/recipe/callout\";\n\nconst CalloutContext = React.createContext<{\n  variantProps: CalloutVariantProps;\n} | null>(null);\n\nconst useCalloutContext = () => {\n  const context = React.useContext(CalloutContext);\n  if (!context)\n    throw new Error(\"Parts of Callout cannot be rendered outside the Callout\");\n\n  return context;\n};\n\nexport const CalloutTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useCalloutContext();\n\n  const classNames = callout({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nCalloutTitle.displayName = \"CalloutTitle\";\n\nexport const CalloutLabel = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useCalloutContext();\n  const classNames = callout({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nCalloutLabel.displayName = \"CalloutLabel\";\n\nexport const CalloutLink = React.forwardRef<\n  HTMLButtonElement,\n  React.HTMLAttributes<HTMLButtonElement> & {\n    /**\n     * @default false\n     */\n    asChild?: boolean;\n  }\n>(({ asChild = false, children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useCalloutContext();\n  const classNames = callout({ variant });\n\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n      <Comp\n        ref={ref}\n        className={clsx(classNames.linkLabel, className)}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </>\n  );\n});\nCalloutLink.displayName = \"CalloutLink\";\n\nexport interface CalloutProps extends Omit<CalloutVariantProps, \"type\"> {\n  icon?: React.ReactNode;\n}\n\ntype ReactCalloutProps = React.HTMLAttributes<HTMLDivElement> & CalloutProps;\n\nexport const Callout = React.forwardRef<HTMLDivElement, ReactCalloutProps>(\n  ({ children, className, variant = \"neutral\", icon, ...otherProps }, ref) => {\n    const classNames = callout({ variant });\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          {icon && <Slot className={classNames.icon}>{icon}</Slot>}\n          <div>\n            <CalloutContext.Provider value={{ variantProps: { variant } }}>\n              {children}\n            </CalloutContext.Provider>\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nCallout.displayName = \"Callout\";\n"
    }
  ]
}
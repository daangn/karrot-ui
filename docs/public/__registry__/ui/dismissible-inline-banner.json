{
  "name": "dismissible-inline-banner",
  "dependencies": [
    "@seed-design/react-dismissible",
    "@daangn/react-monochrome-icon",
    "@radix-ui/react-slot"
  ],
  "registries": [
    {
      "name": "dismissible-inline-banner.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/inlineBanner.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  inlineBanner,\n  type InlineBannerVariantProps,\n} from \"@seed-design/recipe/inlineBanner\";\nimport { IconXmarkLine } from \"@daangn/react-monochrome-icon\";\nimport {\n  useDismissible,\n  type DismissibleProps,\n} from \"@seed-design/react-dismissible\";\n\nconst DismissibleInlineBannerContext = React.createContext<{\n  variantProps: InlineBannerVariantProps;\n} | null>(null);\n\nconst useDismissibleInlineBannerContext = () => {\n  const context = React.useContext(DismissibleInlineBannerContext);\n  if (!context)\n    throw new Error(\n      \"Parts of InlineBanner cannot be rendered outside the InlineBanner\",\n    );\n\n  return context;\n};\n\nexport const DismissibleInlineBannerTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useDismissibleInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nDismissibleInlineBannerTitle.displayName = \"DismissibleInlineBannerTitle\";\n\nexport const DismissibleInlineBannerLabel = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useDismissibleInlineBannerContext();\n  const classNames = inlineBanner({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nDismissibleInlineBannerLabel.displayName = \"DismissibleInlineBannerLabel\";\n\nexport interface DismissibleInlineBannerProps\n  extends DismissibleProps,\n    InlineBannerVariantProps {\n  variant?: Exclude<\n    InlineBannerVariantProps[\"variant\"],\n    \"dangerWeak\" | \"dangerSolid\"\n  >;\n  icon?: React.ReactNode;\n  dismissAriaLabel: string;\n}\n\ntype ReactDismissibleInlineBannerProps = React.HTMLAttributes<HTMLDivElement> &\n  DismissibleInlineBannerProps;\n\nexport const DismissibleInlineBanner = React.forwardRef<\n  HTMLDivElement,\n  ReactDismissibleInlineBannerProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"neutralWeak\",\n      icon,\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n      dismissAriaLabel,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = inlineBanner({ variant });\n\n    const { isOpen, onDismissButtonClick } = useDismissible({\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n    });\n\n    if (!isOpen) return null;\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          {icon && <Slot className={classNames.icon}>{icon}</Slot>}\n          <div>\n            <DismissibleInlineBannerContext.Provider\n              value={{ variantProps: { variant } }}\n            >\n              {children}\n            </DismissibleInlineBannerContext.Provider>\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          aria-label={dismissAriaLabel}\n          className={classNames.dismissButton}\n          onClick={onDismissButtonClick}\n        >\n          <IconXmarkLine className={classNames.dismissIcon} />\n        </button>\n      </div>\n    );\n  },\n);\nDismissibleInlineBanner.displayName = \"DismissibleInlineBanner\";\n"
    }
  ]
}
{
  "name": "actionable-callout",
  "dependencies": [
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "actionable-callout.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/callout.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { callout, type CalloutVariantProps } from \"@seed-design/recipe/callout\";\nimport { IconChevronRightFill } from \"@daangn/react-monochrome-icon\";\n\nconst ActionableCalloutContext = React.createContext<{\n  variantProps: CalloutVariantProps;\n} | null>(null);\n\nconst useActionableCalloutContext = () => {\n  const context = React.useContext(ActionableCalloutContext);\n  if (!context)\n    throw new Error(\n      \"Parts of ActionableCallout cannot be rendered outside the ActionableCallout\",\n    );\n\n  return context;\n};\n\nexport const ActionableCalloutTitle = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useActionableCalloutContext();\n\n  const classNames = callout({ variant });\n\n  return (\n    <>\n      <span\n        ref={ref}\n        className={clsx(classNames.title, className)}\n        {...otherProps}\n      >\n        {children}\n      </span>\n      <span\n        ref={ref}\n        className={clsx(classNames.spacer, className)}\n        {...otherProps}\n      >\n        {\" \"}\n      </span>\n    </>\n  );\n});\nActionableCalloutTitle.displayName = \"ActionableCalloutTitle\";\n\nexport const ActionableCalloutDescription = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ children, className, ...otherProps }, ref) => {\n  const {\n    variantProps: { variant },\n  } = useActionableCalloutContext();\n  const classNames = callout({ variant });\n\n  return (\n    <span\n      ref={ref}\n      className={clsx(classNames.label, className)}\n      {...otherProps}\n    >\n      {children}\n    </span>\n  );\n});\nActionableCalloutDescription.displayName = \"ActionableCalloutDescription\";\n\nexport interface ActionableCalloutProps extends CalloutVariantProps {\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n}\n\ntype ReactActionableCalloutProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n> &\n  ActionableCalloutProps;\n\nexport const ActionableCallout = React.forwardRef<\n  HTMLButtonElement,\n  ReactActionableCalloutProps\n>(\n  (\n    {\n      children,\n      className,\n      type = \"button\",\n      variant = \"neutral\",\n      onClick,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = callout({ variant });\n\n    return (\n      <button\n        onClick={onClick}\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        type={type}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          <div>\n            <ActionableCalloutContext.Provider\n              value={{ variantProps: { variant } }}\n            >\n              {children}\n            </ActionableCalloutContext.Provider>\n          </div>\n        </div>\n        <IconChevronRightFill className={classNames.actionableIcon} />\n      </button>\n    );\n  },\n);\nActionableCallout.displayName = \"ActionableCallout\";\n"
    }
  ]
}
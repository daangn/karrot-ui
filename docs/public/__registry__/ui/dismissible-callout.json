{
  "name": "dismissible-callout",
  "dependencies": [
    "@seed-design/react-dismissible",
    "@daangn/react-monochrome-icon"
  ],
  "registries": [
    {
      "name": "dismissible-callout.tsx",
      "type": "ui",
      "content": "\"use client\";\n\nimport \"@seed-design/stylesheet/callout.css\";\n\nimport * as React from \"react\";\nimport clsx from \"clsx\";\nimport { callout, type CalloutVariantProps } from \"@seed-design/recipe/callout\";\nimport { IconXmarkFill } from \"@daangn/react-monochrome-icon\";\nimport {\n  useDismissible,\n  type DismissibleProps,\n} from \"@seed-design/react-dismissible\";\n\nexport interface DismissibleCalloutProps\n  extends DismissibleProps,\n    CalloutVariantProps {\n  titleText?: string;\n  dismissAriaLabel: string;\n  linkLabel?: string;\n  onLinkLabelClick?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\ntype ReactDismissibleCalloutProps = React.HTMLAttributes<HTMLDivElement> &\n  DismissibleCalloutProps;\n\nexport const DismissibleCallout = React.forwardRef<\n  HTMLDivElement,\n  ReactDismissibleCalloutProps\n>(\n  (\n    {\n      children,\n      className,\n      variant = \"neutral\",\n      titleText,\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n      dismissAriaLabel,\n      linkLabel,\n      onLinkLabelClick,\n      ...otherProps\n    },\n    ref,\n  ) => {\n    const classNames = callout({ variant });\n\n    const { isOpen, onDismissButtonClick } = useDismissible({\n      defaultOpen,\n      isOpen: isPropOpen,\n      onDismiss,\n    });\n\n    if (!isOpen) return null;\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(classNames.root, className)}\n        {...otherProps}\n      >\n        <div className={classNames.content}>\n          <div>\n            {titleText && (\n              <>\n                <span className={classNames.title}>{titleText}</span>\n                <span className={classNames.spacer}> </span>\n              </>\n            )}\n            <span className={classNames.label}>{children}</span>{\" \"}\n            {linkLabel && (\n              <>\n                <span className={classNames.spacer}> </span>\n                <button\n                  type=\"button\"\n                  className={classNames.linkLabel}\n                  onClick={onLinkLabelClick}\n                >\n                  {linkLabel}\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          aria-label={dismissAriaLabel}\n          className={classNames.dismissButton}\n          onClick={onDismissButtonClick}\n        >\n          <IconXmarkFill className={classNames.dismissIcon} />\n        </button>\n      </div>\n    );\n  },\n);\nDismissibleCallout.displayName = \"DismissibleCallout\";\n"
    }
  ]
}
{
  "name": "tabs",
  "dependencies": [
    "@seed-design/react-tabs"
  ],
  "registries": [
    {
      "name": "tabs.tsx",
      "content": "\"use client\";\n\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport {\n  useTabs,\n  useSwipeable,\n  type UseTabsProps,\n  type TriggerProps,\n  type ContentProps,\n  useLazyContents,\n  type UseLazyContentsProps,\n} from \"@seed-design/react-tabs\";\nimport { tabs } from \"@seed-design/recipe/tabs\";\nimport { tab } from \"@seed-design/recipe/tab\";\n\nimport \"@seed-design/stylesheet/tabs.css\";\nimport \"@seed-design/stylesheet/tab.css\";\n\ntype Assign<T, U> = Omit<T, keyof U> & U;\n\ninterface TabsContextValue {\n  api: ReturnType<typeof useTabs> & ReturnType<typeof useSwipeable>;\n  classNames: ReturnType<typeof tabs>;\n  shouldRender: (value: string) => boolean;\n\n  /**\n   * @default false\n   */\n  isSwipeable: boolean;\n\n  layout: \"fill\" | \"hug\";\n  size: \"small\" | \"medium\";\n}\n\nconst TabsContext = React.createContext<TabsContextValue | null>(null);\n\nconst useTabsContext = () => {\n  const context = React.useContext(TabsContext);\n  if (!context) {\n    throw new Error(\"Tabs cannot be rendered outside the Tabs\");\n  }\n  return context;\n};\n\nexport interface TabsProps\n  extends Assign<React.HTMLAttributes<HTMLDivElement>, UseTabsProps>,\n    Omit<UseLazyContentsProps, \"currentValue\"> {\n  /**\n   * @default \"hug\"\n   */\n  layout?: \"fill\" | \"hug\";\n\n  /**\n   * @default \"small\"\n   */\n  size?: \"small\" | \"medium\";\n}\n\nexport const Tabs = React.forwardRef<HTMLDivElement, TabsProps>((props, ref) => {\n  const {\n    className,\n    lazyMode,\n    isLazy,\n    isSwipeable = false,\n    layout = \"hug\",\n    size = \"small\",\n  } = props;\n  const useTabsProps = useTabs(props);\n  const useSwipeableProps = useSwipeable({\n    isSwipeable,\n    onSwipeLeftToRight: useTabsProps.movePrev,\n    onSwipeRightToLeft: useTabsProps.moveNext,\n  });\n  const classNames = tabs({\n    layout,\n  });\n  const { rootProps, value, restProps } = useTabsProps;\n  const { shouldRender } = useLazyContents({ currentValue: value, lazyMode, isLazy });\n  const api = {\n    ...useTabsProps,\n    ...useSwipeableProps,\n  };\n\n  return (\n    <div ref={ref} {...rootProps} {...restProps} className={clsx(classNames.root, className)}>\n      <TabsContext.Provider\n        value={{\n          api,\n          size,\n          classNames,\n          shouldRender,\n          isSwipeable,\n          layout,\n        }}\n      >\n        {props.children}\n      </TabsContext.Provider>\n    </div>\n  );\n});\nTabs.displayName = \"Tabs\";\n\nexport const TabTriggerList = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...otherProps }, ref) => {\n  const { api, classNames } = useTabsContext();\n  const { tabTriggerListProps, triggerSize } = api;\n  const { left } = triggerSize;\n  const { triggerList } = classNames;\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current?.scrollTo({\n        // NOTE: 27px is half of tab's min-width\n        left: left - 27,\n        behavior: \"smooth\",\n      });\n    }\n  }, [left]);\n\n  return (\n    <div\n      ref={containerRef}\n      {...tabTriggerListProps}\n      className={clsx(triggerList, className)}\n      {...otherProps}\n    >\n      {children}\n      <TabIndicator />\n    </div>\n  );\n});\nTabTriggerList.displayName = \"TabTriggerList\";\n\nexport interface TabTriggerProps\n  extends Assign<React.HTMLAttributes<HTMLButtonElement>, TriggerProps> {\n  /**\n   * @default false\n   */\n  alert?: boolean;\n}\n\nexport const TabTrigger = React.forwardRef<HTMLButtonElement, TabTriggerProps>(\n  ({ className, children, value, isDisabled, alert = false, ...otherProps }, ref) => {\n    const { api, layout, size } = useTabsContext();\n    const { getTabTriggerProps } = api;\n    const { label, notification, root } = tab({\n      size,\n      layout,\n    });\n    const { rootProps, notificationProps, labelProps } = getTabTriggerProps({ value, isDisabled });\n\n    return (\n      <button ref={ref} {...rootProps} className={clsx(root, className)} {...otherProps}>\n        <span className={label} {...labelProps}>\n          {children}\n          {alert && <div className={notification} {...notificationProps} />}\n        </span>\n      </button>\n    );\n  },\n);\nTabTrigger.displayName = \"TabTrigger\";\n\nexport const TabContentList = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...otherProps }, ref) => {\n  const { api, classNames, isSwipeable } = useTabsContext();\n  const {\n    tabContentListProps,\n    tabContentCameraProps,\n    getDragProps,\n    currentTabEnabledIndex,\n    swipeMoveX,\n    swipeStatus,\n    tabEnabledCount,\n  } = api;\n  const { contentList, contentCamera } = classNames;\n  const dragProps = getDragProps();\n\n  const getCameraTranslateX = () => {\n    const MODIFIER = 5;\n\n    const currentContentOffsetX = currentTabEnabledIndex * 100;\n\n    if (swipeMoveX > 0 && currentTabEnabledIndex === 0) {\n      return `calc(-${currentContentOffsetX}% + ${swipeMoveX / MODIFIER}px)`;\n    }\n\n    if (swipeMoveX < 0 && currentTabEnabledIndex === tabEnabledCount - 1) {\n      return `calc(-${currentContentOffsetX}% + ${swipeMoveX / MODIFIER}px)`;\n    }\n\n    return `calc(-${currentContentOffsetX}% + ${swipeMoveX}px)`;\n  };\n\n  return (\n    <div\n      ref={ref}\n      {...tabContentListProps}\n      className={clsx(contentList, className)}\n      {...otherProps}\n      style={{\n        userSelect: \"none\",\n        touchAction: \"pan-y\",\n        ...otherProps.style,\n      }}\n    >\n      <div\n        {...tabContentCameraProps}\n        {...dragProps}\n        className={clsx(contentCamera)}\n        style={{\n          willChange: \"transform\",\n          transition:\n            isSwipeable && swipeStatus === \"idle\"\n              ? \"transform 0.2s cubic-bezier(0.15, 0.3, 0.25, 1)\"\n              : \"none\",\n          transform: `translateX(${getCameraTranslateX()})`,\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\nTabContentList.displayName = \"TabContentList\";\n\nexport const TabContent = React.forwardRef<\n  HTMLDivElement,\n  Assign<React.HTMLAttributes<HTMLDivElement>, ContentProps>\n>(({ className, children, value, ...otherProps }, ref) => {\n  const { api, classNames, shouldRender } = useTabsContext();\n  const { getTabContentProps } = api;\n  const { content } = classNames;\n  const tabContentProps = getTabContentProps({ value });\n  const isRender = shouldRender(value);\n\n  return (\n    <div ref={ref} {...tabContentProps} className={clsx(content, className)} {...otherProps}>\n      {isRender && children}\n    </div>\n  );\n});\nTabContent.displayName = \"TabContent\";\n\nconst TabIndicator = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...otherProps }, ref) => {\n    const { api, classNames, isSwipeable, layout } = useTabsContext();\n    const { tabIndicatorProps, triggerSize, currentTabIndex, swipeMoveX, tabCount, swipeStatus } =\n      api;\n    const { indicator } = classNames;\n    const { left: triggerLeft, width: triggerWidth } = triggerSize;\n\n    const getLeft = () => {\n      const MODIFIER = layout === \"hug\" ? 10 : 5;\n      const GUTTER = layout === \"fill\" ? 16 : 0;\n\n      // 양끝 탭에서 스와이프로 인한 이동은 MODIFIER를 5배로 늘려서 완전 조금 이동하도록 함\n      if (\n        (swipeMoveX > 0 && currentTabIndex === 0) ||\n        (swipeMoveX < 0 && currentTabIndex === tabCount - 1)\n      ) {\n        return `calc(${GUTTER}px + ${triggerLeft}px - ${swipeMoveX / (MODIFIER * 5)}px)`;\n      }\n\n      return `calc(${GUTTER}px + ${triggerLeft}px - ${swipeMoveX / MODIFIER}px)`;\n    };\n\n    const getWidth = () => {\n      const GUTTER = 16;\n\n      if (layout === \"hug\") {\n        return triggerWidth;\n      }\n\n      return triggerWidth - GUTTER * 2;\n    };\n\n    const leftTransition =\n      isSwipeable && swipeStatus === \"idle\" ? \"left 0.2s cubic-bezier(0.15, 0.3, 0.25, 1)\" : \"\";\n    const widthTransition = \"width 0.2s cubic-bezier(0.15, 0.3, 0.25, 1)\";\n    const transitions = [leftTransition, widthTransition].filter(Boolean).join(\", \");\n\n    return (\n      <div\n        ref={ref}\n        {...tabIndicatorProps}\n        className={clsx(indicator, className)}\n        {...otherProps}\n        style={{\n          ...otherProps.style,\n          position: \"absolute\",\n          width: getWidth(),\n          left: getLeft(),\n          willChange: \"left, width\",\n          transition: transitions,\n        }}\n      />\n    );\n  },\n);\nTabIndicator.displayName = \"TabIndicator\";\n"
    }
  ],
  "type": "component"
}